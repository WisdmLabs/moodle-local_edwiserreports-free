{"version":3,"sources":["svg.js"],"names":["define","SVG","this","window","element","supported","Doc","parser","draw","prepare","ns","xmlns","xlink","svgjs","did","eid","name","capitalize","create","document","createElementNS","setAttribute","extend","modules","methods","slice","call","arguments","pop","i","length","key","prototype","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","size","style","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","x","y","cx","cy","width","height","r","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","_typeof","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","value","isArray","split","PointArray","pathHandlers","M","c","p","p0","L","H","V","C","Q","Z","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","s","arrayToString","move","box","bbox","sourceArray","destinationArray","pathArray","paramCnt","S","T","A","pathRegReplace","trim","reduce","prev","curr","concat","arr","Point","index","len","parseFloat","getBBox","Number","unit","isNaN","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","dom","_x","attr","_y","center","_width","_height","proportionalSize","clone","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","_id","show","hide","visible","classes","hasClass","indexOf","addClass","removeClass","toggleClass","get","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","_matches","svg","_svg","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","removeAttribute","Object","keys","stringify","o","is","obj","_is","easing","-","<>","Math","cos","PI",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","bind","cancelAnimationFrame","startCurrent","initAnimations","fn","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","last","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","_delay","real","v","plot","d","Box","left","top","w","h","x2","y2","fullBox","BBox","contains","topParent","Error","Shape","clientLeft","clientTop","clientWidth","clientHeight","base","arrayToMatrix","abcdef","px","deltaTransformPoint","skewX","atan2","f","transformedX","sqrt","transformedY","rotation","parseMatrix","inverse","translate","createSVGMatrix","float32String","ctm","getCTM","screenCTM","rect","m","getScreenCTM","point","transform","n","attributes","nodeValue","v_","image","Image","pattern","leading","setAttributeNS","rebuild","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","Translate","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","Infinity","flatten","ViewBox","forEach","event","listeners","handlerMap","listenerId","listener","binding","options","l","ev","_svgjsListenerId","passive","removeEventListener","listener_","event_","data","Event","dispatchEvent","CustomEvent","cancelable","G","_x2","group","getElementById","version","nextSibling","Stop","update","gradient","fy","x1","y1","Pattern","patternUnits","Symbol","symbol","Use","_element","file","use","Rect","Circle","circle","_rx","_ry","Ellipse","ellipse","_rx2","_ry2","_x3","_y2","_width2","_height2","Line","toLine","line","Polyline","Polygon","polygon","_array","morphArray","_x4","_y3","_width3","_height3","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","Text","_rebuild","_build","_x5","text","_text","nodeType","newLined","textContent","build","tspan","newLine","_size","textPath","blankLineOffset","dy","_text2","plain","Tspan","_text3","dx","_dx","_dy","t","createTextNode","getComputedTextLength","TextPath","track","sugar","prefix","toLowerCase","charAt","comp","abs","extension","getTotalLength","pointAt","getPointAtLength","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","undefined","createEvent","initCustomEvent"],"mappings":"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","sourcesContent":["define('local_edwiserreports/chart/svg', [], function() {\n    // Find global reference - uses 'this' by default when available,\n    // falls back to 'window' otherwise (for bundlers like Webpack)\n    var globalRef = typeof this !== 'undefined' ? this : window; // The main wrapping element\n\n    var SVG = globalRef.SVG = function(element) {\n        if (SVG.supported) {\n            element = new SVG.Doc(element);\n\n            if (!SVG.parser.draw) {\n                SVG.prepare();\n            }\n\n            return element;\n        }\n    }; // Default namespaces\n\n\n    SVG.ns = 'http://www.w3.org/2000/svg';\n    SVG.xmlns = 'http://www.w3.org/2000/xmlns/';\n    SVG.xlink = 'http://www.w3.org/1999/xlink';\n    SVG.svgjs = 'http://svgjs.com/svgjs'; // Svg support test\n\n    SVG.supported = function() {\n        return true; // !!document.createElementNS &&\n        //     !! document.createElementNS(SVG.ns,'svg').createSVGRect\n    }(); // Don't bother to continue if SVG is not supported\n\n\n    if (!SVG.supported) return false; // Element id sequence\n\n    SVG.did = 1000; // Get next named element id\n\n    SVG.eid = function(name) {\n        return 'Svgjs' + capitalize(name) + SVG.did++;\n    }; // Method for element creation\n\n\n    SVG.create = function(name) {\n        // create element\n        var element = document.createElementNS(this.ns, name); // apply unique id\n\n        element.setAttribute('id', this.eid(name));\n        return element;\n    }; // Method for extending objects\n\n\n    SVG.extend = function() {\n        var modules, methods; // Get list of modules\n\n        modules = [].slice.call(arguments); // Get object with extensions\n\n        methods = modules.pop();\n\n        for (var i = modules.length - 1; i >= 0; i--) {\n            if (modules[i]) {\n                for (var key in methods) {\n                    modules[i].prototype[key] = methods[key];\n                }\n            }\n        } // Make sure SVG.Set inherits any newly added methods\n\n\n        if (SVG.Set && SVG.Set.inherit) {\n            SVG.Set.inherit();\n        }\n    }; // Invent new element\n\n\n    SVG.invent = function(config) {\n        // Create element initializer\n        var initializer = typeof config.create === 'function' ? config.create : function() {\n            this.constructor.call(this, SVG.create(config.create));\n        }; // Inherit prototype\n\n        if (config.inherit) {\n            initializer.prototype = new config.inherit();\n        } // Extend with methods\n\n\n        if (config.extend) {\n            SVG.extend(initializer, config.extend);\n        } // Attach construct method to parent\n\n\n        if (config.construct) {\n            SVG.extend(config.parent || SVG.Container, config.construct);\n        }\n\n        return initializer;\n    }; // Adopt existing svg elements\n\n\n    SVG.adopt = function(node) {\n        // check for presence of node\n        if (!node) return null; // make sure a node isn't already adopted\n\n        if (node.instance) return node.instance; // initialize variables\n\n        var element; // adopt with element-specific settings\n\n        if (node.nodeName == 'svg') {\n            element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();\n        } else if (node.nodeName == 'linearGradient') {\n            element = new SVG.Gradient('linear');\n        } else if (node.nodeName == 'radialGradient') {\n            element = new SVG.Gradient('radial');\n        } else if (SVG[capitalize(node.nodeName)]) {\n            element = new SVG[capitalize(node.nodeName)]();\n        } else {\n            element = new SVG.Element(node);\n        } // ensure references\n\n\n        element.type = node.nodeName;\n        element.node = node;\n        node.instance = element; // SVG.Class specific preparations\n\n        if (element instanceof SVG.Doc) {\n            element.namespace().defs();\n        } // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n\n\n        element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n        return element;\n    }; // Initialize parsing element\n\n\n    SVG.prepare = function() {\n        // Select document body and create invisible svg element\n        var body = document.getElementsByTagName('body')[0],\n            draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object\n\n        SVG.parser = {\n            body: body || document.documentElement,\n            draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node,\n            poly: draw.polyline().node,\n            path: draw.path().node,\n            native: SVG.create('svg')\n        };\n    };\n\n    SVG.parser = {\n        native: SVG.create('svg')\n    };\n    document.addEventListener('DOMContentLoaded', function() {\n        if (!SVG.parser.draw) {\n            SVG.prepare();\n        }\n    }, false); // Storage for regular expressions\n\n    SVG.regex = {\n        // Parse unit value\n        numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n        // Parse hex value\n        hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n        // Parse rgb value\n        rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n        // Parse reference id\n        reference: /#([a-z0-9\\-_]+)/i,\n        // splits a transformation chain\n        transforms: /\\)\\s*,?\\s*/,\n        // Whitespace\n        whitespace: /\\s/g,\n        // Test hex value\n        isHex: /^#[a-f0-9]{3,6}$/i,\n        // Test rgb value\n        isRgb: /^rgb\\(/,\n        // Test css declaration\n        isCss: /[^:]+:[^;]+;?/,\n        // Test for blank string\n        isBlank: /^(\\s+)?$/,\n        // Test for numeric string\n        isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        // Test for percent value\n        isPercent: /^-?[\\d\\.]+%$/,\n        // Test for image url\n        isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n        // split at whitespace and comma\n        delimiter: /[\\s,]+/,\n        // The following regex are used to parse the d attribute of a path\n        // Matches all hyphens which are not after an exponent\n        hyphen: /([^e])\\-/gi,\n        // Replaces and tests for all path letters\n        pathLetters: /[MLHVCSQTAZ]/gi,\n        // yes we need this one, too\n        isPathLetter: /[MLHVCSQTAZ]/i,\n        // matches 0.154.23.45\n        numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n        // matches .\n        dots: /\\./g\n    };\n    SVG.utils = {\n        // Map function\n        map: function map(array, block) {\n            var il = array.length,\n                result = [];\n\n            for (var i = 0; i < il; i++) {\n                result.push(block(array[i]));\n            }\n\n            return result;\n        },\n        // Filter function\n        filter: function filter(array, block) {\n            var il = array.length,\n                result = [];\n\n            for (var i = 0; i < il; i++) {\n                if (block(array[i])) {\n                    result.push(array[i]);\n                }\n            }\n\n            return result;\n        },\n        filterSVGElements: function filterSVGElements(nodes) {\n            return this.filter(nodes, function(el) {\n                return el instanceof window.SVGElement;\n            });\n        }\n    };\n    SVG.defaults = {\n        // Default attribute values\n        attrs: {\n            // fill and stroke\n            'fill-opacity': 1,\n            'stroke-opacity': 1,\n            'stroke-width': 0,\n            'stroke-linejoin': 'miter',\n            'stroke-linecap': 'butt',\n            fill: '#000000',\n            stroke: '#000000',\n            opacity: 1,\n            // position\n            x: 0,\n            y: 0,\n            cx: 0,\n            cy: 0,\n            // size\n            width: 0,\n            height: 0,\n            // radius\n            r: 0,\n            rx: 0,\n            ry: 0,\n            // gradient\n            offset: 0,\n            'stop-opacity': 1,\n            'stop-color': '#000000',\n            // text\n            'font-size': 16,\n            'font-family': 'Helvetica, Arial, sans-serif',\n            'text-anchor': 'start'\n        }\n    }; // Module for color convertions\n\n    SVG.Color = function(color) {\n        var match; // initialize defaults\n\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        if (!color) return; // parse color\n\n        if (typeof color === 'string') {\n            if (SVG.regex.isRgb.test(color)) {\n                // get rgb values\n                match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values\n\n                this.r = parseInt(match[1]);\n                this.g = parseInt(match[2]);\n                this.b = parseInt(match[3]);\n            } else if (SVG.regex.isHex.test(color)) {\n                // get hex values\n                match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values\n\n                this.r = parseInt(match[1], 16);\n                this.g = parseInt(match[2], 16);\n                this.b = parseInt(match[3], 16);\n            }\n        } else if (_typeof(color) === 'object') {\n            this.r = color.r;\n            this.g = color.g;\n            this.b = color.b;\n        }\n    };\n\n    SVG.extend(SVG.Color, {\n        // Default to hex conversion\n        toString: function toString() {\n            return this.toHex();\n        },\n        // Build hex value\n        toHex: function toHex() {\n            return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);\n        },\n        // Build rgb value\n        toRgb: function toRgb() {\n            return 'rgb(' + [this.r, this.g, this.b].join() + ')';\n        },\n        // Calculate true brightness\n        brightness: function brightness() {\n            return this.r / 255 * 0.30 + this.g / 255 * 0.59 + this.b / 255 * 0.11;\n        },\n        // Make color morphable\n        morph: function morph(color) {\n            this.destination = new SVG.Color(color);\n            return this;\n        },\n        // Get morphed color at given position\n        at: function at(pos) {\n            // make sure a destination is defined\n            if (!this.destination) return this; // normalise pos\n\n            pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color\n\n            return new SVG.Color({\n                r: ~~(this.r + (this.destination.r - this.r) * pos),\n                g: ~~(this.g + (this.destination.g - this.g) * pos),\n                b: ~~(this.b + (this.destination.b - this.b) * pos)\n            });\n        }\n    }); // Testers\n    // Test if given value is a color string\n\n    SVG.Color.test = function(color) {\n        color += '';\n        return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);\n    }; // Test if given value is a rgb object\n\n\n    SVG.Color.isRgb = function(color) {\n        return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n    }; // Test if given value is a color\n\n\n    SVG.Color.isColor = function(color) {\n        return SVG.Color.isRgb(color) || SVG.Color.test(color);\n    }; // Module for array conversion\n\n\n    SVG.Array = function(array, fallback) {\n        array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback\n\n        if (array.length == 0 && fallback) {\n            array = fallback.valueOf();\n        } // parse array\n\n\n        this.value = this.parse(array);\n    };\n\n    SVG.extend(SVG.Array, {\n        // Convert array to string\n        toString: function toString() {\n            return this.value.join(' ');\n        },\n        // Real value\n        valueOf: function valueOf() {\n            return this.value;\n        },\n        // Parse whitespace separated string\n        parse: function parse(array) {\n            array = array.valueOf(); // if already is an array, no need to parse it\n\n            if (Array.isArray(array)) return array;\n            return this.split(array);\n        }\n    }); // Poly points array\n\n    SVG.PointArray = function(array, fallback) {\n        SVG.Array.call(this, array, fallback || [\n            [0, 0]\n        ]);\n    }; // Inherit from SVG.Array\n\n\n    SVG.PointArray.prototype = new SVG.Array();\n    SVG.PointArray.prototype.constructor = SVG.PointArray;\n    var pathHandlers = {\n        M: function M(c, p, p0) {\n            p.x = p0.x = c[0];\n            p.y = p0.y = c[1];\n            return ['M', p.x, p.y];\n        },\n        L: function L(c, p) {\n            p.x = c[0];\n            p.y = c[1];\n            return ['L', c[0], c[1]];\n        },\n        H: function H(c, p) {\n            p.x = c[0];\n            return ['H', c[0]];\n        },\n        V: function V(c, p) {\n            p.y = c[0];\n            return ['V', c[0]];\n        },\n        C: function C(c, p) {\n            p.x = c[4];\n            p.y = c[5];\n            return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n        },\n        Q: function Q(c, p) {\n            p.x = c[2];\n            p.y = c[3];\n            return ['Q', c[0], c[1], c[2], c[3]];\n        },\n        Z: function Z(c, p, p0) {\n            p.x = p0.x;\n            p.y = p0.y;\n            return ['Z'];\n        }\n    };\n    var mlhvqtcsa = 'mlhvqtcsaz'.split('');\n\n    for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {\n        pathHandlers[mlhvqtcsa[i]] = function(i) {\n            return function(c, p, p0) {\n                if (i == 'H') c[0] = c[0] + p.x;\n                else if (i == 'V') c[0] = c[0] + p.y;\n                else if (i == 'A') {\n                    c[5] = c[5] + p.x, c[6] = c[6] + p.y;\n                } else {\n                    for (var j = 0, jl = c.length; j < jl; ++j) {\n                        c[j] = c[j] + (j % 2 ? p.y : p.x);\n                    }\n                }\n                return pathHandlers[i](c, p, p0);\n            };\n        }(mlhvqtcsa[i].toUpperCase());\n    } // Path points array\n\n\n    SVG.PathArray = function(array, fallback) {\n        SVG.Array.call(this, array, fallback || [\n            ['M', 0, 0]\n        ]);\n    }; // Inherit from SVG.Array\n\n\n    SVG.PathArray.prototype = new SVG.Array();\n    SVG.PathArray.prototype.constructor = SVG.PathArray;\n    SVG.extend(SVG.PathArray, {\n        // Convert array to string\n        toString: function toString() {\n            return arrayToString(this.value);\n        },\n        // Move path string\n        move: function move(x, y) {\n            // get bounding box of current situation\n            var box = this.bbox(); // get relative offset\n\n            x -= box.x;\n            y -= box.y;\n            return this;\n        },\n        // Get morphed path array at given position\n        at: function at(pos) {\n            // make sure a destination is defined\n            if (!this.destination) return this;\n            var sourceArray = this.value,\n                destinationArray = this.destination.value,\n                array = [],\n                pathArray = new SVG.PathArray(),\n                il,\n                jl; // Animate has specified in the SVG spec\n            // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n            for (var i = 0, il = sourceArray.length; i < il; i++) {\n                array[i] = [sourceArray[i][0]];\n\n                for (var j = 1, jl = sourceArray[i].length; j < jl; j++) {\n                    array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n                } // For the two flags of the elliptical arc command, the SVG spec say:\n                // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n                // Elliptical arc command as an array followed by corresponding indexes:\n                // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n                //   0    1   2        3                 4             5      6  7\n\n\n                if (array[i][0] === 'A') {\n                    array[i][4] = +(array[i][4] != 0);\n                    array[i][5] = +(array[i][5] != 0);\n                }\n            } // Directly modify the value of a path array, this is done this way for performance\n\n\n            pathArray.value = array;\n            return pathArray;\n        },\n        // Absolutize and parse path to array\n        parse: function parse(array) {\n            // if it's already a patharray, no need to parse it\n            if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing\n\n            var s,\n                arr,\n                paramCnt = {\n                    'M': 2,\n                    'L': 2,\n                    'H': 1,\n                    'V': 1,\n                    'C': 6,\n                    'S': 4,\n                    'Q': 4,\n                    'T': 2,\n                    'A': 7,\n                    'Z': 0\n                };\n\n            if (typeof array === 'string') {\n                array = array.replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n                    .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n                    .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen\n                    .trim() // trim\n                    .split(SVG.regex.delimiter); // split into array\n            } else {\n                array = array.reduce(function(prev, curr) {\n                    return [].concat.call(prev, curr);\n                }, []);\n            } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n            var arr = [],\n                p = new SVG.Point(),\n                p0 = new SVG.Point(),\n                index = 0,\n                len = array.length;\n\n            do {\n                // Test if we have a path letter\n                if (SVG.regex.isPathLetter.test(array[index])) {\n                    s = array[index];\n                    ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n                } else if (s == 'M') {\n                    s = 'L';\n                } else if (s == 'm') {\n                    s = 'l';\n                }\n\n                arr.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n            } while (len > index);\n\n            return arr;\n        },\n        // Get bounding box of path\n        bbox: function bbox() {\n            if (!SVG.parser.draw) {\n                SVG.prepare();\n            }\n\n            SVG.parser.path.setAttribute('d', this.toString());\n            return SVG.parser.path.getBBox();\n        }\n    }); // Module for unit convertions\n\n    SVG.Number = SVG.invent({\n        // Initialize\n        create: function create(value, unit) {\n            // initialize defaults\n            this.value = 0;\n            this.unit = unit || ''; // parse value\n\n            if (typeof value === 'number') {\n                // ensure a valid numeric value\n                this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n            } else if (typeof value === 'string') {\n                unit = value.match(SVG.regex.numberAndUnit);\n\n                if (unit) {\n                    // make value numeric\n                    this.value = parseFloat(unit[1]); // normalize\n\n                    if (unit[5] == '%') {\n                        this.value /= 100;\n                    } else if (unit[5] == 's') {\n                        this.value *= 1000;\n                    } // store unit\n\n\n                    this.unit = unit[5];\n                }\n            } else {\n                if (value instanceof SVG.Number) {\n                    this.value = value.valueOf();\n                    this.unit = value.unit;\n                }\n            }\n        },\n        // Add methods\n        extend: {\n            // Stringalize\n            toString: function toString() {\n                return (this.unit == '%' ? ~~(this.value * 1e8) / 1e6 : this.unit == 's' ? this.value / 1e3 : this.value) + this.unit;\n            },\n            toJSON: function toJSON() {\n                return this.toString();\n            },\n            // Convert to primitive\n            valueOf: function valueOf() {\n                return this.value;\n            },\n            // Add number\n            plus: function plus(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this + number, this.unit || number.unit);\n            },\n            // Subtract number\n            minus: function minus(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this - number, this.unit || number.unit);\n            },\n            // Multiply number\n            times: function times(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this * number, this.unit || number.unit);\n            },\n            // Divide number\n            divide: function divide(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this / number, this.unit || number.unit);\n            },\n            // Convert to different unit\n            to: function to(unit) {\n                var number = new SVG.Number(this);\n\n                if (typeof unit === 'string') {\n                    number.unit = unit;\n                }\n\n                return number;\n            },\n            // Make number morphable\n            morph: function morph(number) {\n                this.destination = new SVG.Number(number);\n\n                if (number.relative) {\n                    this.destination.value += this.value;\n                }\n\n                return this;\n            },\n            // Get morphed number at given position\n            at: function at(pos) {\n                // Make sure a destination is defined\n                if (!this.destination) return this; // Generate new morphed number\n\n                return new SVG.Number(this.destination).minus(this).times(pos).plus(this);\n            }\n        }\n    });\n    SVG.Element = SVG.invent({\n        // Initialize node\n        create: function create(node) {\n            // make stroke value accessible dynamically\n            this._stroke = SVG.defaults.attrs.stroke;\n            this._event = null; // initialize data object\n\n            this.dom = {}; // create circular reference\n\n            if (this.node = node) {\n                this.type = node.nodeName;\n                this.node.instance = this; // store current attribute value\n\n                this._stroke = node.getAttribute('stroke') || this._stroke;\n            }\n        },\n        // Add class methods\n        extend: {\n            // Move over x-axis\n            x: function x(_x) {\n                return this.attr('x', _x);\n            },\n            // Move over y-axis\n            y: function y(_y) {\n                return this.attr('y', _y);\n            },\n            // Move by center over x-axis\n            cx: function cx(x) {\n                return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n            },\n            // Move by center over y-axis\n            cy: function cy(y) {\n                return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n            },\n            // Move element to given x and y values\n            move: function move(x, y) {\n                return this.x(x).y(y);\n            },\n            // Move element by its center\n            center: function center(x, y) {\n                return this.cx(x).cy(y);\n            },\n            // Set width of element\n            width: function width(_width) {\n                return this.attr('width', _width);\n            },\n            // Set height of element\n            height: function height(_height) {\n                return this.attr('height', _height);\n            },\n            // Set element size to given width and height\n            size: function size(width, height) {\n                var p = proportionalSize(this, width, height);\n                return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));\n            },\n            // Clone element\n            clone: function clone(parent) {\n                // write dom data to the dom so the clone can pickup the data\n                this.writeDataToDom(); // clone element and assign new id\n\n                var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n                if (parent) parent.add(clone);\n                else this.after(clone);\n                return clone;\n            },\n            // Remove element\n            remove: function remove() {\n                if (this.parent()) {\n                    this.parent().removeElement(this);\n                }\n\n                return this;\n            },\n            // Replace element\n            replace: function replace(element) {\n                this.after(element).remove();\n                return element;\n            },\n            // Add element to given container and return self\n            addTo: function addTo(parent) {\n                return parent.put(this);\n            },\n            // Add element to given container and return container\n            putIn: function putIn(parent) {\n                return parent.add(this);\n            },\n            // Get / set id\n            id: function id(_id) {\n                return this.attr('id', _id);\n            },\n            // Show element\n            show: function show() {\n                return this.style('display', '');\n            },\n            // Hide element\n            hide: function hide() {\n                return this.style('display', 'none');\n            },\n            // Is element visible?\n            visible: function visible() {\n                return this.style('display') != 'none';\n            },\n            // Return id on string conversion\n            toString: function toString() {\n                return this.attr('id');\n            },\n            // Return array of classes on the node\n            classes: function classes() {\n                var attr = this.attr('class');\n                return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);\n            },\n            // Return true if class exists on the node, false otherwise\n            hasClass: function hasClass(name) {\n                return this.classes().indexOf(name) != -1;\n            },\n            // Add class to the node\n            addClass: function addClass(name) {\n                if (!this.hasClass(name)) {\n                    var array = this.classes();\n                    array.push(name);\n                    this.attr('class', array.join(' '));\n                }\n\n                return this;\n            },\n            // Remove class from the node\n            removeClass: function removeClass(name) {\n                if (this.hasClass(name)) {\n                    this.attr('class', this.classes().filter(function(c) {\n                        return c != name;\n                    }).join(' '));\n                }\n\n                return this;\n            },\n            // Toggle the presence of a class on the node\n            toggleClass: function toggleClass(name) {\n                return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n            },\n            // Get referenced element form attribute value\n            reference: function reference(attr) {\n                return SVG.get(this.attr(attr));\n            },\n            // Returns the parent element instance\n            parent: function parent(type) {\n                var parent = this; // check for parent\n\n                if (!parent.node.parentNode) return null; // get parent element\n\n                parent = SVG.adopt(parent.node.parentNode);\n                if (!type) return parent; // loop trough ancestors if type is given\n\n                while (parent && parent.node instanceof window.SVGElement) {\n                    if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n                    if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document') return null; // #759, #720\n\n                    parent = SVG.adopt(parent.node.parentNode);\n                }\n            },\n            // Get parent document\n            doc: function doc() {\n                return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);\n            },\n            // return array of all ancestors of given type up to the root svg\n            parents: function parents(type) {\n                var parents = [],\n                    parent = this;\n\n                do {\n                    parent = parent.parent(type);\n                    if (!parent || !parent.node) break;\n                    parents.push(parent);\n                } while (parent.parent);\n\n                return parents;\n            },\n            // matches the element vs a css selector\n            matches: function matches(selector) {\n                return _matches(this.node, selector);\n            },\n            // Returns the svg node to call native svg methods on it\n            native: function native() {\n                return this.node;\n            },\n            // Import raw svg\n            svg: function svg(_svg) {\n                // create temporary holder\n                var well = document.createElement('svg'); // act as a setter if svg is given\n\n                if (_svg && this instanceof SVG.Parent) {\n                    // dump raw svg\n                    well.innerHTML = '<svg>' + _svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'; // transplant nodes\n\n                    for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n                        this.node.appendChild(well.firstChild.firstChild);\n                    } // otherwise act as a getter\n\n                } else {\n                    // create a wrapping svg element in case of partial content\n                    well.appendChild(_svg = document.createElement('svg')); // write svgjs data to the dom\n\n                    this.writeDataToDom(); // insert a copy of this node\n\n                    _svg.appendChild(this.node.cloneNode(true)); // return target element\n\n\n                    return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '');\n                }\n\n                return this;\n            },\n            // write svgjs data to the dom\n            writeDataToDom: function writeDataToDom() {\n                // dump variables recursively\n                if (this.each || this.lines) {\n                    var fn = this.each ? this : this.lines();\n                    fn.each(function() {\n                        this.writeDataToDom();\n                    });\n                } // remove previously set data\n\n\n                this.node.removeAttribute('svgjs:data');\n\n                if (Object.keys(this.dom).length) {\n                    this.node.setAttribute('svgjs:data', JSON.stringify(this.dom));\n                } // see #428\n\n\n                return this;\n            },\n            // set given data to the elements data property\n            setData: function setData(o) {\n                this.dom = o;\n                return this;\n            },\n            is: function is(obj) {\n                return _is(this, obj);\n            }\n        }\n    });\n    SVG.easing = {\n        '-': function _(pos) {\n            return pos;\n        },\n        '<>': function _(pos) {\n            return -Math.cos(pos * Math.PI) / 2 + 0.5;\n        },\n        '>': function _(pos) {\n            return Math.sin(pos * Math.PI / 2);\n        },\n        '<': function _(pos) {\n            return -Math.cos(pos * Math.PI / 2) + 1;\n        }\n    };\n\n    SVG.morph = function(pos) {\n        return function(from, to) {\n            return new SVG.MorphObj(from, to).at(pos);\n        };\n    };\n\n    SVG.Situation = SVG.invent({\n        create: function create(o) {\n            this.init = false;\n            this.reversed = false;\n            this.reversing = false;\n            this.duration = new SVG.Number(o.duration).valueOf();\n            this.delay = new SVG.Number(o.delay).valueOf();\n            this.start = +new Date() + this.delay;\n            this.finish = this.start + this.duration;\n            this.ease = o.ease; // this.loop is incremented from 0 to this.loops\n            // it is also incremented when in an infinite loop (when this.loops is true)\n\n            this.loop = 0;\n            this.loops = false;\n            this.animations = { // functionToCall: [list of morphable objects]\n                // e.g. move: [SVG.Number, SVG.Number]\n            };\n            this.attrs = { // holds all attributes which are not represented from a function svg.js provides\n                // e.g. someAttr: SVG.Number\n            };\n            this.styles = { // holds all styles which should be animated\n                // e.g. fill-color: SVG.Color\n            };\n            this.transforms = [ // holds all transformations as transformation objects\n                // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n            ];\n            this.once = { // functions to fire at a specific position\n                // e.g. \"0.5\": function foo(){}\n            };\n        }\n    });\n    SVG.FX = SVG.invent({\n        create: function create(element) {\n            this._target = element;\n            this.situations = [];\n            this.active = false;\n            this.situation = null;\n            this.paused = false;\n            this.lastPos = 0;\n            this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n            // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n\n            this.absPos = 0;\n            this._speed = 1;\n        },\n        extend: {\n            /**\n             * sets or returns the target of this animation\n             * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n             * @param ease function || string Function which should be used for easing or easing keyword\n             * @param delay Number indicating the delay before the animation starts\n             * @return target || this\n             */\n            animate: function animate(o, ease, delay) {\n                if (_typeof(o) === 'object') {\n                    ease = o.ease;\n                    delay = o.delay;\n                    o = o.duration;\n                }\n\n                var situation = new SVG.Situation({\n                    duration: o || 1000,\n                    delay: delay || 0,\n                    ease: SVG.easing[ease || '-'] || ease\n                });\n                this.queue(situation);\n                return this;\n            },\n\n            /**\n             * sets a delay before the next element of the queue is called\n             * @param delay Duration of delay in milliseconds\n             * @return this.target()\n             */\n\n            /**\n             * sets or returns the target of this animation\n             * @param null || target SVG.Element which should be set as new target\n             * @return target || this\n             */\n            target: function target(_target) {\n                if (_target && _target instanceof SVG.Element) {\n                    this._target = _target;\n                    return this;\n                }\n\n                return this._target;\n            },\n            // returns the absolute position at a given time\n            timeToAbsPos: function timeToAbsPos(timestamp) {\n                return (timestamp - this.situation.start) / (this.situation.duration / this._speed);\n            },\n            // returns the timestamp from a given absolute positon\n            absPosToTime: function absPosToTime(absPos) {\n                return this.situation.duration / this._speed * absPos + this.situation.start;\n            },\n            // starts the animationloop\n            startAnimFrame: function startAnimFrame() {\n                this.stopAnimFrame();\n                this.animationFrame = window.requestAnimationFrame(function() {\n                    this.step();\n                }.bind(this));\n            },\n            // cancels the animationframe\n            stopAnimFrame: function stopAnimFrame() {\n                window.cancelAnimationFrame(this.animationFrame);\n            },\n            // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n            start: function start() {\n                // dont start if already started\n                if (!this.active && this.situation) {\n                    this.active = true;\n                    this.startCurrent();\n                }\n\n                return this;\n            },\n            // start the current situation\n            startCurrent: function startCurrent() {\n                this.situation.start = +new Date() + this.situation.delay / this._speed;\n                this.situation.finish = this.situation.start + this.situation.duration / this._speed;\n                return this.initAnimations().step();\n            },\n\n            /**\n             * adds a function / Situation to the animation queue\n             * @param fn function / situation to add\n             * @return this\n             */\n            queue: function queue(fn) {\n                if (typeof fn === 'function' || fn instanceof SVG.Situation) {\n                    this.situations.push(fn);\n                }\n\n                if (!this.situation) this.situation = this.situations.shift();\n                return this;\n            },\n\n            /**\n             * pulls next element from the queue and execute it\n             * @return this\n             */\n            dequeue: function dequeue() {\n                // stop current animation\n                this.stop(); // get next animation from queue\n\n                this.situation = this.situations.shift();\n\n                if (this.situation) {\n                    if (this.situation instanceof SVG.Situation) {\n                        this.start();\n                    } else {\n                        // If it is not a SVG.Situation, then it is a function, we execute it\n                        this.situation.call(this);\n                    }\n                }\n\n                return this;\n            },\n            // updates all animations to the current state of the element\n            // this is important when one property could be changed from another property\n            initAnimations: function initAnimations() {\n                var source;\n                var s = this.situation;\n                if (s.init) return this;\n\n                for (var i in s.animations) {\n                    source = this.target()[i]();\n\n                    if (!Array.isArray(source)) {\n                        source = [source];\n                    }\n\n                    if (!Array.isArray(s.animations[i])) {\n                        s.animations[i] = [s.animations[i]];\n                    } // if(s.animations[i].length > source.length) {\n                    //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\n                    // }\n\n\n                    for (var j = source.length; j--;) {\n                        // The condition is because some methods return a normal number instead\n                        // of a SVG.Number\n                        if (s.animations[i][j] instanceof SVG.Number) {\n                            source[j] = new SVG.Number(source[j]);\n                        }\n\n                        s.animations[i][j] = source[j].morph(s.animations[i][j]);\n                    }\n                }\n\n                for (var i in s.attrs) {\n                    s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);\n                }\n\n                for (var i in s.styles) {\n                    s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);\n                }\n\n                s.initialTransformation = this.target().matrixify();\n                s.init = true;\n                return this;\n            },\n            clearQueue: function clearQueue() {\n                this.situations = [];\n                return this;\n            },\n            clearCurrent: function clearCurrent() {\n                this.situation = null;\n                return this;\n            },\n\n            /** stops the animation immediately\n             * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\n             * @param clearQueue A Boolean indicating whether to remove queued animation as well.\n             * @return this\n             */\n            stop: function stop(jumpToEnd, clearQueue) {\n                var active = this.active;\n                this.active = false;\n\n                if (clearQueue) {\n                    this.clearQueue();\n                }\n\n                if (jumpToEnd && this.situation) {\n                    // initialize the situation if it was not\n                    !active && this.startCurrent();\n                    this.atEnd();\n                }\n\n                this.stopAnimFrame();\n                return this.clearCurrent();\n            },\n            after: function after(fn) {\n                var c = this.last(),\n                    wrapper = function wrapper(e) {\n                        if (e.detail.situation == c) {\n                            fn.call(this, c);\n                            this.off('finished.fx', wrapper); // prevent memory leak\n                        }\n                    };\n\n                this.target().on('finished.fx', wrapper);\n                return this._callStart();\n            },\n            // adds a callback which is called whenever one animation step is performed\n            during: function during(fn) {\n                var c = this.last(),\n                    wrapper = function wrapper(e) {\n                        if (e.detail.situation == c) {\n                            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);\n                        }\n                    }; // see above\n\n\n                this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n                this.after(function() {\n                    this.off('during.fx', wrapper);\n                });\n                return this._callStart();\n            },\n            // calls after ALL animations in the queue are finished\n            afterAll: function afterAll(fn) {\n                var wrapper = function wrapper(e) {\n                    fn.call(this);\n                    this.off('allfinished.fx', wrapper);\n                }; // see above\n\n\n                this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);\n                return this._callStart();\n            },\n            last: function last() {\n                return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n            },\n            // adds one property to the animations\n            add: function add(method, args, type) {\n                this.last()[type || 'animations'][method] = args;\n                return this._callStart();\n            },\n\n            /** perform one step of the animation\n             *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\n             *  @return this\n             */\n            step: function step(ignoreTime) {\n                // convert current time to an absolute position\n                if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position\n\n                if (this.situation.loops !== false) {\n                    var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0\n\n                    absPos = Math.max(this.absPos, 0);\n                    absPosInt = Math.floor(absPos);\n\n                    if (this.situation.loops === true || absPosInt < this.situation.loops) {\n                        this.pos = absPos - absPosInt;\n                        lastLoop = this.situation.loop;\n                        this.situation.loop = absPosInt;\n                    } else {\n                        this.absPos = this.situation.loops;\n                        this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n\n                        lastLoop = this.situation.loop - 1;\n                        this.situation.loop = this.situation.loops;\n                    }\n\n                    if (this.situation.reversing) {\n                        // Toggle reversed if an odd number of loops as occured since the last call of step\n                        this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);\n                    }\n                } else {\n                    // If there are no loop, the absolute position must not be above 1\n                    this.absPos = Math.min(this.absPos, 1);\n                    this.pos = this.absPos;\n                } // while the absolute position can be below 0, the position must not be below 0\n\n\n                if (this.pos < 0) this.pos = 0;\n                if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing\n\n                var eased = this.situation.ease(this.pos); // call once-callbacks\n\n                for (var i in this.situation.once) {\n                    if (i > this.lastPos && i <= eased) {\n                        this.situation.once[i].call(this.target(), this.pos, eased);\n                        delete this.situation.once[i];\n                    }\n                } // fire during callback with position, eased position and current situation as parameter\n\n\n                if (this.active) this.target().fire('during', {\n                    pos: this.pos,\n                    eased: eased,\n                    fx: this,\n                    situation: this.situation\n                }); // the user may call stop or finish in the during callback\n                // so make sure that we still have a valid situation\n\n                if (!this.situation) {\n                    return this;\n                } // apply the actual animation to every property\n\n\n                this.eachAt(); // do final code when situation is finished\n\n                if (this.pos == 1 && !this.situation.reversed || this.situation.reversed && this.pos == 0) {\n                    // stop animation callback\n                    this.stopAnimFrame(); // fire finished callback with current situation as parameter\n\n                    this.target().fire('finished', {\n                        fx: this,\n                        situation: this.situation\n                    });\n\n                    if (!this.situations.length) {\n                        this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback\n\n                        if (!this.situations.length) {\n                            this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...\n\n                            this.active = false;\n                        }\n                    } // start next animation\n\n\n                    if (this.active) this.dequeue();\n                    else this.clearCurrent();\n                } else if (!this.paused && this.active) {\n                    // we continue animating when we are not at the end\n                    this.startAnimFrame();\n                } // save last eased position for once callback triggering\n\n\n                this.lastPos = eased;\n                return this;\n            },\n            // calculates the step for every property and calls block with it\n            eachAt: function eachAt() {\n                var len,\n                    at,\n                    self = this,\n                    target = this.target(),\n                    s = this.situation; // apply animations which can be called trough a method\n\n                for (var i in s.animations) {\n                    at = [].concat(s.animations[i]).map(function(el) {\n                        return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n                    });\n                    target[i].apply(target, at);\n                } // apply animation which has to be applied with attr()\n\n\n                for (var i in s.attrs) {\n                    at = [i].concat(s.attrs[i]).map(function(el) {\n                        return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n                    });\n                    target.attr.apply(target, at);\n                } // apply animation which has to be applied with style()\n\n\n                for (var i in s.styles) {\n                    at = [i].concat(s.styles[i]).map(function(el) {\n                        return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n                    });\n                    target.style.apply(target, at);\n                } // animate initialTransformation which has to be chained\n\n\n                if (s.transforms.length) {\n                    // get initial initialTransformation\n                    at = s.initialTransformation;\n\n                    for (var i = 0, len = s.transforms.length; i < len; i++) {\n                        // get next transformation in chain\n                        var a = s.transforms[i]; // multiply matrix directly\n\n                        if (a instanceof SVG.Matrix) {\n                            if (a.relative) {\n                                at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));\n                            } else {\n                                at = at.morph(a).at(s.ease(this.pos));\n                            }\n\n                            continue;\n                        } // when transformation is absolute we have to reset the needed transformation first\n\n\n                        if (!a.relative) {\n                            a.undo(at.extract());\n                        } // and reapply it after\n\n\n                        at = at.multiply(a.at(s.ease(this.pos)));\n                    } // set new matrix on element\n\n\n                    target.matrix(at);\n                }\n\n                return this;\n            },\n            // adds an once-callback which is called at a specific position and never again\n            once: function once(pos, fn, isEased) {\n                var c = this.last();\n                if (!isEased) pos = c.ease(pos);\n                c.once[pos] = fn;\n                return this;\n            },\n            _callStart: function _callStart() {\n                setTimeout(function() {\n                    this.start();\n                }.bind(this), 0);\n                return this;\n            }\n        },\n        parent: SVG.Element,\n        // Add method to parent elements\n        construct: {\n            // Get fx module or create a new one, then animate with given duration and ease\n            animate: function animate(o, ease, delay) {\n                return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);\n            },\n            delay: function delay(_delay) {\n                return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay);\n            },\n            stop: function stop(jumpToEnd, clearQueue) {\n                if (this.fx) {\n                    this.fx.stop(jumpToEnd, clearQueue);\n                }\n\n                return this;\n            },\n            finish: function finish() {\n                if (this.fx) {\n                    this.fx.finish();\n                }\n\n                return this;\n            }\n        }\n    }); // MorphObj is used whenever no morphable object is given\n\n    SVG.MorphObj = SVG.invent({\n        create: function create(from, to) {\n            // prepare color for morphing\n            if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values\n\n            if (SVG.regex.delimiter.test(from)) {\n                // prepare path for morphing\n                if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to); // prepare value list for morphing\n                else return new SVG.Array(from).morph(to);\n            } // prepare number for morphing\n\n\n            if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing\n\n            this.value = from;\n            this.destination = to;\n        },\n        extend: {\n            at: function at(pos, real) {\n                return real < 1 ? this.value : this.destination;\n            },\n            valueOf: function valueOf() {\n                return this.value;\n            }\n        }\n    });\n    SVG.extend(SVG.FX, {\n        // Add animatable attributes\n        attr: function attr(a, v, relative) {\n            // apply attributes individually\n            if (_typeof(a) === 'object') {\n                for (var key in a) {\n                    this.attr(key, a[key]);\n                }\n            } else {\n                this.add(a, v, 'attrs');\n            }\n\n            return this;\n        },\n        // Add animatable plot\n        plot: function plot(a, b, c, d) {\n            // Lines can be plotted with 4 arguments\n            if (arguments.length == 4) {\n                return this.plot([a, b, c, d]);\n            }\n\n            return this.add('plot', new(this.target().morphArray)(a));\n        }\n    });\n    SVG.Box = SVG.invent({\n        create: function create(x, y, width, height) {\n            if (_typeof(x) === 'object' && !(x instanceof SVG.Element)) {\n                // chromes getBoundingClientRect has no x and y property\n                return SVG.Box.call(this, x.left != null ? x.left : x.x, x.top != null ? x.top : x.y, x.width, x.height);\n            } else if (arguments.length == 4) {\n                this.x = x;\n                this.y = y;\n                this.width = width;\n                this.height = height;\n            } // add center, right, bottom...\n\n\n            fullBox(this);\n        }\n    });\n    SVG.BBox = SVG.invent({\n        // Initialize\n        create: function create(element) {\n            SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given\n\n            if (element instanceof SVG.Element) {\n                var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\n\n                try {\n                    if (!document.documentElement.contains) {\n                        // This is IE - it does not support contains() for top-level SVGs\n                        var topParent = element.node;\n\n                        while (topParent.parentNode) {\n                            topParent = topParent.parentNode;\n                        }\n\n                        if (topParent != document) throw new Error('Element not in the dom');\n                    } else {} // the element is NOT in the dom, throw error\n                    // disabling the check below which fixes issue #76\n                    // if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\n                    // find native bbox\n\n\n                    box = element.node.getBBox();\n                } catch (e) {\n                    if (element instanceof SVG.Shape) {\n                        if (!SVG.parser.draw) {\n                            // fixes apexcharts/vue-apexcharts #14\n                            SVG.prepare();\n                        }\n\n                        var clone = element.clone(SVG.parser.draw.instance).show();\n                        box = clone.node.getBBox();\n                        clone.remove();\n                    } else {\n                        box = {\n                            x: element.node.clientLeft,\n                            y: element.node.clientTop,\n                            width: element.node.clientWidth,\n                            height: element.node.clientHeight\n                        };\n                    }\n                }\n\n                SVG.Box.call(this, box);\n            }\n        },\n        // Define ancestor\n        inherit: SVG.Box,\n        // Define Parent\n        parent: SVG.Element,\n        // Constructor\n        construct: {\n            // Get bounding box\n            bbox: function bbox() {\n                return new SVG.BBox(this);\n            }\n        }\n    });\n    SVG.BBox.prototype.constructor = SVG.BBox;\n    SVG.Matrix = SVG.invent({\n        // Initialize\n        create: function create(source) {\n            var base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n            source = source instanceof SVG.Element ? source.matrixify() : typeof source === 'string' ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) : arguments.length == 6 ? arrayToMatrix([].slice.call(arguments)) : Array.isArray(source) ? arrayToMatrix(source) : _typeof(source) === 'object' ? source : base; // merge source\n\n            for (var i = abcdef.length - 1; i >= 0; --i) {\n                this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];\n            }\n        },\n        // Add methods\n        extend: {\n            // Extract individual transformations\n            extract: function extract() {\n                // find delta transform points\n                var px = deltaTransformPoint(this, 0, 1),\n                    py = deltaTransformPoint(this, 1, 0),\n                    skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n                return {\n                    // translation\n                    x: this.e,\n                    y: this.f,\n                    transformedX: (this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n                    transformedY: (this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n                    // rotation\n                    rotation: skewX,\n                    a: this.a,\n                    b: this.b,\n                    c: this.c,\n                    d: this.d,\n                    e: this.e,\n                    f: this.f,\n                    matrix: new SVG.Matrix(this)\n                };\n            },\n            // Clone matrix\n            clone: function clone() {\n                return new SVG.Matrix(this);\n            },\n            // Morph one matrix into another\n            morph: function morph(matrix) {\n                // store new destination\n                this.destination = new SVG.Matrix(matrix);\n                return this;\n            },\n            // Multiplies by given matrix\n            multiply: function multiply(matrix) {\n                return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));\n            },\n            // Inverses matrix\n            inverse: function inverse() {\n                return new SVG.Matrix(this.native().inverse());\n            },\n            // Translate matrix\n            translate: function translate(x, y) {\n                return new SVG.Matrix(this.native().translate(x || 0, y || 0));\n            },\n            // Convert to native SVGMatrix\n            native: function native() {\n                // create new matrix\n                var matrix = SVG.parser.native.createSVGMatrix(); // update with current values\n\n                for (var i = abcdef.length - 1; i >= 0; i--) {\n                    matrix[abcdef[i]] = this[abcdef[i]];\n                }\n\n                return matrix;\n            },\n            // Convert matrix to string\n            toString: function toString() {\n                // Construct the matrix directly, avoid values that are too small\n                return 'matrix(' + float32String(this.a) + ',' + float32String(this.b) + ',' + float32String(this.c) + ',' + float32String(this.d) + ',' + float32String(this.e) + ',' + float32String(this.f) + ')';\n            }\n        },\n        // Define parent\n        parent: SVG.Element,\n        // Add parent method\n        construct: {\n            // Get current matrix\n            ctm: function ctm() {\n                return new SVG.Matrix(this.node.getCTM());\n            },\n            // Get current screen matrix\n            screenCTM: function screenCTM() {\n                /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n                This is needed because FF does not return the transformation matrix\n                for the inner coordinate system when getScreenCTM() is called on nested svgs.\n                However all other Browsers do that */\n                if (this instanceof SVG.Nested) {\n                    var rect = this.rect(1, 1);\n                    var m = rect.node.getScreenCTM();\n                    rect.remove();\n                    return new SVG.Matrix(m);\n                }\n\n                return new SVG.Matrix(this.node.getScreenCTM());\n            }\n        }\n    });\n    SVG.Point = SVG.invent({\n        // Initialize\n        create: function create(x, y) {\n            var source,\n                base = {\n                    x: 0,\n                    y: 0\n                }; // ensure source as object\n\n            source = Array.isArray(x) ? {\n                x: x[0],\n                y: x[1]\n            } : _typeof(x) === 'object' ? {\n                x: x.x,\n                y: x.y\n            } : x != null ? {\n                x: x,\n                y: y != null ? y : x\n            } : base; // If y has no value, then x is used has its value\n            // merge source\n\n            this.x = source.x;\n            this.y = source.y;\n        },\n        // Add methods\n        extend: {\n            // Clone point\n            clone: function clone() {\n                return new SVG.Point(this);\n            },\n            // Morph one point into another\n            morph: function morph(x, y) {\n                // store new destination\n                this.destination = new SVG.Point(x, y);\n                return this;\n            }\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Get point\n        point: function point(x, y) {\n            return new SVG.Point(x, y).transform(this.screenCTM().inverse());\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Set svg element attribute\n        attr: function attr(a, v, n) {\n            // act as full getter\n            if (a == null) {\n                // get an object of attributes\n                a = {};\n                v = this.node.attributes;\n\n                for (var n = v.length - 1; n >= 0; n--) {\n                    a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue;\n                }\n\n                return a;\n            } else if (_typeof(a) === 'object') {\n                // apply every attribute individually if an object is passed\n                for (var v_ in a) {\n                    this.attr(v_, a[v_]);\n                }\n            } else if (v === null) {\n                // remove value\n                this.node.removeAttribute(a);\n            } else if (v == null) {\n                // act as a getter if the first and only argument is not an object\n                v = this.node.getAttribute(a);\n                return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;\n            } else {\n                // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n                if (a == 'stroke-width') {\n                    this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);\n                } else if (a == 'stroke') {\n                    this._stroke = v;\n                } // convert image fill and stroke to patterns\n\n\n                if (a == 'fill' || a == 'stroke') {\n                    if (SVG.regex.isImage.test(v)) {\n                        v = this.doc().defs().image(v, 0, 0);\n                    }\n\n                    if (v instanceof SVG.Image) {\n                        v = this.doc().defs().pattern(0, 0, function() {\n                            this.add(v);\n                        });\n                    }\n                } // ensure correct numeric values (also accepts NaN and Infinity)\n\n\n                if (typeof v === 'number') {\n                    v = new SVG.Number(v);\n                } // ensure full hex color\n                else if (SVG.Color.isColor(v)) {\n                    v = new SVG.Color(v);\n                } // parse array values\n                else if (Array.isArray(v)) {\n                    v = new SVG.Array(v);\n                } // if the passed attribute is leading...\n\n\n                if (a == 'leading') {\n                    // ... call the leading method instead\n                    if (this.leading) {\n                        this.leading(v);\n                    }\n                } else {\n                    // set given attribute on node\n                    typeof n === 'string' ? this.node.setAttributeNS(n, a, v.toString()) : this.node.setAttribute(a, v.toString());\n                } // rebuild if required\n\n\n                if (this.rebuild && (a == 'font-size' || a == 'x')) {\n                    this.rebuild(a, v);\n                }\n            }\n\n            return this;\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Add transformations\n        transform: function transform(o, relative) {\n            // get target in case of the fx module, otherwise reference this\n            var target = this,\n                matrix;\n            // act as a getter\n\n            if (_typeof(o) !== 'object') {\n                // get current matrix\n                matrix = new SVG.Matrix(target).extract();\n                return typeof o === 'string' ? matrix[o] : matrix;\n            } // get current matrix\n\n\n            matrix = new SVG.Matrix(target); // ensure relative flag\n\n            relative = !!relative || !!o.relative; // act on matrix\n\n            if (o.a != null) {\n                matrix = relative // relative\n                    ?\n                    matrix.multiply(new SVG.Matrix(o)) // absolute\n                    :\n                    new SVG.Matrix(o);\n            }\n\n            return this.attr('transform', matrix);\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Reset all transformations\n        untransform: function untransform() {\n            return this.attr('transform', null);\n        },\n        // merge the whole transformation chain into one matrix and returns it\n        matrixify: function matrixify() {\n            var matrix = (this.attr('transform') || ''). // split transformations\n            split(SVG.regex.transforms).slice(0, -1).map(function(str) {\n                    // generate key => value pairs\n                    var kv = str.trim().split('(');\n                    return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str) {\n                        return parseFloat(str);\n                    })];\n                }) // merge every transformation into one matrix\n                .reduce(function(matrix, transform) {\n                    if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));\n                    return matrix[transform[0]].apply(matrix, transform[1]);\n                }, new SVG.Matrix());\n            return matrix;\n        },\n        // add an element to another parent without changing the visual representation on the screen\n        toParent: function toParent(parent) {\n            if (this == parent) return this;\n            var ctm = this.screenCTM();\n            var pCtm = parent.screenCTM().inverse();\n            this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n            return this;\n        },\n        // same as above with parent equals root-svg\n        toDoc: function toDoc() {\n            return this.toParent(this.doc());\n        }\n    });\n    SVG.Transformation = SVG.invent({\n        create: function create(source, inversed) {\n            if (arguments.length > 1 && typeof inversed !== 'boolean') {\n                return this.constructor.call(this, [].slice.call(arguments));\n            }\n\n            if (Array.isArray(source)) {\n                for (var i = 0, len = this.arguments.length; i < len; ++i) {\n                    this[this.arguments[i]] = source[i];\n                }\n            } else if (_typeof(source) === 'object') {\n                for (var i = 0, len = this.arguments.length; i < len; ++i) {\n                    this[this.arguments[i]] = source[this.arguments[i]];\n                }\n            }\n\n            this.inversed = false;\n\n            if (inversed === true) {\n                this.inversed = true;\n            }\n        }\n    });\n    SVG.Translate = SVG.invent({\n        parent: SVG.Matrix,\n        inherit: SVG.Transformation,\n        create: function create(source, inversed) {\n            this.constructor.apply(this, [].slice.call(arguments));\n        },\n        extend: {\n            arguments: ['transformedX', 'transformedY'],\n            method: 'translate'\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Dynamic style generator\n        style: function style(s, v) {\n            if (arguments.length == 0) {\n                // get full style\n                return this.node.style.cssText || '';\n            } else if (arguments.length < 2) {\n                // apply every style individually if an object is passed\n                if (_typeof(s) === 'object') {\n                    for (var v_ in s) {\n                        this.style(v_, s[v_]);\n                    }\n                } else if (SVG.regex.isCss.test(s)) {\n                    // parse css string\n                    s = s.split(/\\s*;\\s*/) // filter out suffix ; and stuff like ;;\n                        .filter(function(e) {\n                            return !!e;\n                        }).map(function(e) {\n                            return e.split(/\\s*:\\s*/);\n                        }); // apply every definition individually\n\n                    while (v = s.pop()) {\n                        this.style(v[0], v[1]);\n                    }\n                } else {\n                    // act as a getter if the first and only argument is not an object\n                    return this.node.style[camelCase(s)];\n                }\n            } else {\n                this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;\n            }\n\n            return this;\n        }\n    });\n    SVG.Parent = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            this.constructor.call(this, element);\n        },\n        // Inherit from\n        inherit: SVG.Element,\n        // Add class methods\n        extend: {\n            // Returns all child elements\n            children: function children() {\n                return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n                    return SVG.adopt(node);\n                });\n            },\n            // Add given element at a position\n            add: function add(element, i) {\n                if (i == null) {\n                    this.node.appendChild(element.node);\n                } else if (element.node != this.node.childNodes[i]) {\n                    this.node.insertBefore(element.node, this.node.childNodes[i]);\n                }\n\n                return this;\n            },\n            // Basically does the same as `add()` but returns the added element instead\n            put: function put(element, i) {\n                this.add(element, i);\n                return element;\n            },\n            // Checks if the given element is a child\n            has: function has(element) {\n                return this.index(element) >= 0;\n            },\n            // Gets index of given element\n            index: function index(element) {\n                return [].slice.call(this.node.childNodes).indexOf(element.node);\n            },\n            // Get a element at the given index\n            get: function get(i) {\n                return SVG.adopt(this.node.childNodes[i]);\n            },\n            // Get first child\n            first: function first() {\n                return this.get(0);\n            },\n            // Get the last child\n            last: function last() {\n                return this.get(this.node.childNodes.length - 1);\n            },\n            // Iterates over all children and invokes a given block\n            each: function each(block, deep) {\n                var il,\n                    children = this.children();\n\n                for (var i = 0, il = children.length; i < il; i++) {\n                    if (children[i] instanceof SVG.Element) {\n                        block.apply(children[i], [i, children]);\n                    }\n\n                    if (deep && children[i] instanceof SVG.Container) {\n                        children[i].each(block, deep);\n                    }\n                }\n\n                return this;\n            },\n            // Remove a given child\n            removeElement: function removeElement(element) {\n                this.node.removeChild(element.node);\n                return this;\n            },\n            // Remove all elements in this container\n            clear: function clear() {\n                // remove children\n                while (this.node.hasChildNodes()) {\n                    this.node.removeChild(this.node.lastChild);\n                } // remove defs reference\n\n\n                delete this._defs;\n                return this;\n            },\n            // Get defs\n            defs: function defs() {\n                return this.doc().defs();\n            }\n        }\n    });\n    SVG.extend(SVG.Parent, {\n        ungroup: function ungroup(parent, depth) {\n            if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;\n            parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));\n            depth = depth || Infinity;\n            this.each(function() {\n                if (this instanceof SVG.Defs) return this;\n                if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);\n                return this.toParent(parent);\n            });\n            this.node.firstChild || this.remove();\n            return this;\n        },\n        flatten: function flatten(parent, depth) {\n            return this.ungroup(parent, depth);\n        }\n    });\n    SVG.Container = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            this.constructor.call(this, element);\n        },\n        // Inherit from\n        inherit: SVG.Parent\n    });\n    SVG.ViewBox = SVG.invent({\n            // Define parent\n            parent: SVG.Container,\n            // Add parent method\n            construct: {}\n        }) // Add events to elements\n    ;\n    ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', // , 'mouseenter' -> not supported by IE\n        // , 'mouseleave' -> not supported by IE\n        'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'\n    ].forEach(function(event) {\n        // add event to SVG.Element\n        SVG.Element.prototype[event] = function(f) {\n            // bind event to element rather than element node\n            SVG.on(this.node, event, f);\n            return this;\n        };\n    }); // Initialize listeners stack\n\n    SVG.listeners = [];\n    SVG.handlerMap = [];\n    SVG.listenerId = 0; // Add event binder in the SVG namespace\n\n    SVG.on = function(node, event, listener, binding, options) {\n        // create listener, get object-index\n        var l = listener.bind(binding || node.instance || node),\n            index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1,\n            ev = event.split('.')[0],\n            ns = event.split('.')[1] || '*'; // ensure valid object\n\n        SVG.listeners[index] = SVG.listeners[index] || {};\n        SVG.listeners[index][ev] = SVG.listeners[index][ev] || {};\n        SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {};\n\n        if (!listener._svgjsListenerId) {\n            listener._svgjsListenerId = ++SVG.listenerId;\n        } // reference listener\n\n\n        SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l; // add listener\n\n        node.addEventListener(ev, l, options || {\n            passive: true\n        });\n    }; // Add event unbinder in the SVG namespace\n\n\n    SVG.off = function(node, event, listener) {\n        var index = SVG.handlerMap.indexOf(node),\n            ev = event && event.split('.')[0],\n            ns = event && event.split('.')[1],\n            namespace = '';\n        if (index == -1) return;\n\n        if (listener) {\n            if (typeof listener === 'function') listener = listener._svgjsListenerId;\n            if (!listener) return; // remove listener reference\n\n            if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n                // remove listener\n                node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false);\n                delete SVG.listeners[index][ev][ns || '*'][listener];\n            }\n        } else if (ns && ev) {\n            // remove all listeners for a namespaced event\n            if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n                for (var listener_ in SVG.listeners[index][ev][ns]) {\n                    SVG.off(node, [ev, ns].join('.'), listener_);\n                }\n\n                delete SVG.listeners[index][ev][ns];\n            }\n        } else if (ns) {\n            // remove all listeners for a specific namespace\n            for (var event_ in SVG.listeners[index]) {\n                for (var namespace in SVG.listeners[index][event_]) {\n                    if (ns === namespace) {\n                        SVG.off(node, [event_, ns].join('.'));\n                    }\n                }\n            }\n        } else if (ev) {\n            // remove all listeners for the event\n            if (SVG.listeners[index][ev]) {\n                for (var namespace in SVG.listeners[index][ev]) {\n                    SVG.off(node, [ev, namespace].join('.'));\n                }\n\n                delete SVG.listeners[index][ev];\n            }\n        } else {\n            // remove all listeners on a given node\n            for (var event_ in SVG.listeners[index]) {\n                SVG.off(node, event_);\n            }\n\n            delete SVG.listeners[index];\n            delete SVG.handlerMap[index];\n        }\n    }; //\n\n\n    SVG.extend(SVG.Element, {\n        // Bind given event to listener\n        on: function on(event, listener, binding, options) {\n            SVG.on(this.node, event, listener, binding, options);\n            return this;\n        },\n        // Unbind event from listener\n        off: function off(event, listener) {\n            SVG.off(this.node, event, listener);\n            return this;\n        },\n        // Fire given event\n        fire: function fire(event, data) {\n            // Dispatch event\n            if (event instanceof window.Event) {\n                this.node.dispatchEvent(event);\n            } else {\n                this.node.dispatchEvent(event = new SVG.CustomEvent(event, {\n                    detail: data,\n                    cancelable: true\n                }));\n            }\n\n            this._event = event;\n            return this;\n        },\n        event: function event() {\n            return this._event;\n        }\n    });\n    SVG.Defs = SVG.invent({\n        // Initialize node\n        create: 'defs',\n        // Inherit from\n        inherit: SVG.Container\n    });\n    SVG.G = SVG.invent({\n        // Initialize node\n        create: 'g',\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Move over x-axis\n            x: function x(_x2) {\n                return _x2 == null ? this.transform('x') : this.transform({\n                    x: _x2 - this.x()\n                }, true);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a group element\n            group: function group() {\n                return this.put(new SVG.G());\n            }\n        }\n    });\n    SVG.Doc = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            if (element) {\n                // ensure the presence of a dom element\n                element = typeof element === 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.\n                // This allows svg.js to work with svg documents as well.\n\n                if (element.nodeName == 'svg') {\n                    this.constructor.call(this, element);\n                } else {\n                    this.constructor.call(this, SVG.create('svg'));\n                    element.appendChild(this.node);\n                    this.size('100%', '100%');\n                } // set svg element attributes and ensure defs node\n\n\n                this.namespace().defs();\n            }\n        },\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Add namespaces\n            namespace: function namespace() {\n                return this.attr({\n                    xmlns: SVG.ns,\n                    version: '1.1'\n                }).attr('xmlns:xlink', SVG.xlink, SVG.xmlns).attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);\n            },\n            // Creates and returns defs element\n            defs: function defs() {\n                if (!this._defs) {\n                    var defs; // Find or create a defs element in this instance\n\n                    if (defs = this.node.getElementsByTagName('defs')[0]) {\n                        this._defs = SVG.adopt(defs);\n                    } else {\n                        this._defs = new SVG.Defs();\n                    } // Make sure the defs node is at the end of the stack\n\n\n                    this.node.appendChild(this._defs.node);\n                }\n\n                return this._defs;\n            },\n            // custom parent method\n            parent: function parent() {\n                if (!this.node.parentNode || this.node.parentNode.nodeName == '#document') return null;\n                return this.node.parentNode;\n            },\n            // Removes the doc from the DOM\n            remove: function remove() {\n                if (this.parent()) {\n                    this.parent().removeChild(this.node);\n                }\n\n                return this;\n            },\n            clear: function clear() {\n                // remove children\n                while (this.node.hasChildNodes()) {\n                    this.node.removeChild(this.node.lastChild);\n                } // remove defs reference\n\n\n                delete this._defs; // add back parser\n\n                if (SVG.parser.draw && !SVG.parser.draw.parentNode) {\n                    this.node.appendChild(SVG.parser.draw);\n                }\n\n                return this;\n            },\n            clone: function clone(parent) {\n                // write dom data to the dom so the clone can pickup the data\n                this.writeDataToDom(); // get reference to node\n\n                var node = this.node; // clone element and assign new id\n\n                var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n                if (parent) {\n                    (parent.node || parent).appendChild(clone.node);\n                } else {\n                    node.parentNode.insertBefore(clone.node, node.nextSibling);\n                }\n\n                return clone;\n            }\n        }\n    }); // ### This module adds backward / forward functionality to elements.\n    //\n\n    SVG.extend(SVG.Element, { // Get all siblings, including myself\n    });\n    SVG.Gradient = SVG.invent({\n        // Initialize node\n        create: function create(type) {\n            this.constructor.call(this, SVG.create(type + 'Gradient')); // store type\n\n            this.type = type;\n        },\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Add a color stop\n            at: function at(offset, color, opacity) {\n                return this.put(new SVG.Stop()).update(offset, color, opacity);\n            },\n            // Update gradient\n            update: function update(block) {\n                // remove all stops\n                this.clear(); // invoke passed block\n\n                if (typeof block === 'function') {\n                    block.call(this, this);\n                }\n\n                return this;\n            },\n            // Return the fill id\n            fill: function fill() {\n                return 'url(#' + this.id() + ')';\n            },\n            // Alias string convertion to fill\n            toString: function toString() {\n                return this.fill();\n            },\n            // custom attr to handle transform\n            attr: function attr(a, b, c) {\n                if (a == 'transform') a = 'gradientTransform';\n                return SVG.Container.prototype.attr.call(this, a, b, c);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create gradient element in defs\n            gradient: function gradient(type, block) {\n                return this.defs().gradient(type, block);\n            }\n        }\n    }); // Add animatable methods to both gradient and fx module\n\n    SVG.extend(SVG.Gradient, SVG.FX, {\n        // From position\n        from: function from(x, y) {\n            return (this._target || this).type == 'radial' ? this.attr({\n                fx: new SVG.Number(x),\n                fy: new SVG.Number(y)\n            }) : this.attr({\n                x1: new SVG.Number(x),\n                y1: new SVG.Number(y)\n            });\n        },\n        // To position\n        to: function to(x, y) {\n            return (this._target || this).type == 'radial' ? this.attr({\n                cx: new SVG.Number(x),\n                cy: new SVG.Number(y)\n            }) : this.attr({\n                x2: new SVG.Number(x),\n                y2: new SVG.Number(y)\n            });\n        }\n    }); // Base gradient generation\n\n    SVG.extend(SVG.Defs, {\n        // define gradient\n        gradient: function gradient(type, block) {\n            return this.put(new SVG.Gradient(type)).update(block);\n        }\n    });\n    SVG.Stop = SVG.invent({\n        // Initialize node\n        create: 'stop',\n        // Inherit from\n        inherit: SVG.Element,\n        // Add class methods\n        extend: {\n            // add color stops\n            update: function update(o) {\n                if (typeof o === 'number' || o instanceof SVG.Number) {\n                    o = {\n                        offset: arguments[0],\n                        color: arguments[1],\n                        opacity: arguments[2]\n                    };\n                } // set attributes\n\n\n                if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n                if (o.color != null) this.attr('stop-color', o.color);\n                if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));\n                return this;\n            }\n        }\n    });\n    SVG.Pattern = SVG.invent({\n        // Initialize node\n        create: 'pattern',\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Return the fill id\n            fill: function fill() {\n                return 'url(#' + this.id() + ')';\n            },\n            // Update pattern by rebuilding\n            update: function update(block) {\n                // remove content\n                this.clear(); // invoke passed block\n\n                if (typeof block === 'function') {\n                    block.call(this, this);\n                }\n\n                return this;\n            },\n            // Alias string convertion to fill\n            toString: function toString() {\n                return this.fill();\n            },\n            // custom attr to handle transform\n            attr: function attr(a, b, c) {\n                if (a == 'transform') a = 'patternTransform';\n                return SVG.Container.prototype.attr.call(this, a, b, c);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create pattern element in defs\n            pattern: function pattern(width, height, block) {\n                return this.defs().pattern(width, height, block);\n            }\n        }\n    });\n    SVG.extend(SVG.Defs, {\n        // Define gradient\n        pattern: function pattern(width, height, block) {\n            return this.put(new SVG.Pattern()).update(block).attr({\n                x: 0,\n                y: 0,\n                width: width,\n                height: height,\n                patternUnits: 'userSpaceOnUse'\n            });\n        }\n    });\n    SVG.Shape = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            this.constructor.call(this, element);\n        },\n        // Inherit from\n        inherit: SVG.Element\n    });\n    SVG.Symbol = SVG.invent({\n        // Initialize node\n        create: 'symbol',\n        // Inherit from\n        inherit: SVG.Container,\n        construct: {\n            // create symbol\n            symbol: function symbol() {\n                return this.put(new SVG.Symbol());\n            }\n        }\n    });\n    SVG.Use = SVG.invent({\n        // Initialize node\n        create: 'use',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Use element as a reference\n            element: function element(_element, file) {\n                // Set lined element\n                return this.attr('href', (file || '') + '#' + _element, SVG.xlink);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a use element\n            use: function use(element, file) {\n                return this.put(new SVG.Use()).element(element, file);\n            }\n        }\n    });\n    SVG.Rect = SVG.invent({\n        // Initialize node\n        create: 'rect',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create a rect element\n            rect: function rect(width, height) {\n                return this.put(new SVG.Rect()).size(width, height);\n            }\n        }\n    });\n    SVG.Circle = SVG.invent({\n        // Initialize node\n        create: 'circle',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create circle element, based on ellipse\n            circle: function circle(size) {\n                return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);\n            }\n        }\n    });\n    SVG.extend(SVG.Circle, SVG.FX, {\n        // Radius x value\n        rx: function rx(_rx) {\n            return this.attr('r', _rx);\n        },\n        // Alias radius x value\n        ry: function ry(_ry) {\n            return this.rx(_ry);\n        }\n    });\n    SVG.Ellipse = SVG.invent({\n        // Initialize node\n        create: 'ellipse',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create an ellipse\n            ellipse: function ellipse(width, height) {\n                return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);\n            }\n        }\n    });\n    SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n        // Radius x value\n        rx: function rx(_rx2) {\n            return this.attr('rx', _rx2);\n        },\n        // Radius y value\n        ry: function ry(_ry2) {\n            return this.attr('ry', _ry2);\n        }\n    }); // Add common method\n\n    SVG.extend(SVG.Circle, SVG.Ellipse, {\n        // Move over x-axis\n        x: function x(_x3) {\n            return _x3 == null ? this.cx() - this.rx() : this.cx(_x3 + this.rx());\n        },\n        // Move over y-axis\n        y: function y(_y2) {\n            return _y2 == null ? this.cy() - this.ry() : this.cy(_y2 + this.ry());\n        },\n        // Move by center over x-axis\n        cx: function cx(x) {\n            return x == null ? this.attr('cx') : this.attr('cx', x);\n        },\n        // Move by center over y-axis\n        cy: function cy(y) {\n            return y == null ? this.attr('cy') : this.attr('cy', y);\n        },\n        // Set width of element\n        width: function width(_width2) {\n            return _width2 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width2).divide(2));\n        },\n        // Set height of element\n        height: function height(_height2) {\n            return _height2 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height2).divide(2));\n        },\n        // Custom size function\n        size: function size(width, height) {\n            var p = proportionalSize(this, width, height);\n            return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));\n        }\n    });\n    SVG.Line = SVG.invent({\n        // Initialize node\n        create: 'line',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Get array\n            array: function array() {\n                return new SVG.PointArray([\n                    [this.attr('x1'), this.attr('y1')],\n                    [this.attr('x2'), this.attr('y2')]\n                ]);\n            },\n            // Overwrite native plot() method\n            plot: function plot(x1, y1, x2, y2) {\n                if (x1 == null) {\n                    return this.array();\n                } else if (typeof y1 !== 'undefined') {\n                    x1 = {\n                        x1: x1,\n                        y1: y1,\n                        x2: x2,\n                        y2: y2\n                    };\n                } else {\n                    x1 = new SVG.PointArray(x1).toLine();\n                }\n\n                return this.attr(x1);\n            },\n            // Move by left top corner\n            move: function move(x, y) {\n                return this.attr(this.array().move(x, y).toLine());\n            },\n            // Set element size to given width and height\n            size: function size(width, height) {\n                var p = proportionalSize(this, width, height);\n                return this.attr(this.array().size(p.width, p.height).toLine());\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a line element\n            line: function line(x1, y1, x2, y2) {\n                // make sure plot is called as a setter\n                // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\n                return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()), x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]);\n            }\n        }\n    });\n    SVG.Polyline = SVG.invent({\n        // Initialize node\n        create: 'polyline',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create a wrapped polyline element\n            polyline: function polyline(p) {\n                // make sure plot is called as a setter\n                return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());\n            }\n        }\n    });\n    SVG.Polygon = SVG.invent({\n        // Initialize node\n        create: 'polygon',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create a wrapped polygon element\n            polygon: function polygon(p) {\n                // make sure plot is called as a setter\n                return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());\n            }\n        }\n    }); // Add polygon-specific functions\n\n    SVG.extend(SVG.Polyline, SVG.Polygon, {\n        // Get array\n        array: function array() {\n            return this._array || (this._array = new SVG.PointArray(this.attr('points')));\n        },\n        // Plot new path\n        plot: function plot(p) {\n            return p == null ? this.array() : this.clear().attr('points', typeof p === 'string' ? p : this._array = new SVG.PointArray(p));\n        },\n        // Clear array cache\n        clear: function clear() {\n            delete this._array;\n            return this;\n        },\n        // Move by left top corner\n        move: function move(x, y) {\n            return this.attr('points', this.array().move(x, y));\n        },\n        // Set element size to given width and height\n        size: function size(width, height) {\n            var p = proportionalSize(this, width, height);\n            return this.attr('points', this.array().size(p.width, p.height));\n        }\n    }); // unify all point to point elements\n\n    SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n        // Define morphable array\n        morphArray: SVG.PointArray,\n        // Move by left top corner over x-axis\n        x: function x(_x4) {\n            return _x4 == null ? this.bbox().x : this.move(_x4, this.bbox().y);\n        },\n        // Move by left top corner over y-axis\n        y: function y(_y3) {\n            return _y3 == null ? this.bbox().y : this.move(this.bbox().x, _y3);\n        },\n        // Set width of element\n        width: function width(_width3) {\n            var b = this.bbox();\n            return _width3 == null ? b.width : this.size(_width3, b.height);\n        },\n        // Set height of element\n        height: function height(_height3) {\n            var b = this.bbox();\n            return _height3 == null ? b.height : this.size(b.width, _height3);\n        }\n    });\n    SVG.Path = SVG.invent({\n        // Initialize node\n        create: 'path',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Define morphable array\n            morphArray: SVG.PathArray,\n            // Get array\n            array: function array() {\n                return this._array || (this._array = new SVG.PathArray(this.attr('d')));\n            },\n            // Plot new path\n            plot: function plot(d) {\n                return d == null ? this.array() : this.clear().attr('d', typeof d === 'string' ? d : this._array = new SVG.PathArray(d));\n            },\n            // Clear array cache\n            clear: function clear() {\n                delete this._array;\n                return this;\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a wrapped path element\n            path: function path(d) {\n                // make sure plot is called as a setter\n                return this.put(new SVG.Path()).plot(d || new SVG.PathArray());\n            }\n        }\n    });\n    SVG.Image = SVG.invent({\n        // Initialize node\n        create: 'image',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // (re)load image\n            load: function load(url) {\n                if (!url) return this;\n                var self = this,\n                    img = new window.Image(); // preload image\n\n                SVG.on(img, 'load', function() {\n                    SVG.off(img);\n                    var p = self.parent(SVG.Pattern);\n                    if (p === null) return; // ensure image size\n\n                    if (self.width() == 0 && self.height() == 0) {\n                        self.size(img.width, img.height);\n                    } // ensure pattern size if not set\n\n\n                    if (p && p.width() == 0 && p.height() == 0) {\n                        p.size(self.width(), self.height());\n                    } // callback\n\n\n                    if (typeof self._loaded === 'function') {\n                        self._loaded.call(self, {\n                            width: img.width,\n                            height: img.height,\n                            ratio: img.width / img.height,\n                            url: url\n                        });\n                    }\n                });\n                SVG.on(img, 'error', function(e) {\n                    SVG.off(img);\n\n                    if (typeof self._error === 'function') {\n                        self._error.call(self, e);\n                    }\n                });\n                return this.attr('href', img.src = this.src = url, SVG.xlink);\n            },\n            // Add loaded callback\n            loaded: function loaded(_loaded) {\n                this._loaded = _loaded;\n                return this;\n            },\n            error: function error(_error) {\n                this._error = _error;\n                return this;\n            }\n        },\n        // Add parent method\n        construct: {\n            // create image element, load image and set its size\n            image: function image(source, width, height) {\n                return this.put(new SVG.Image()).load(source).size(width || 0, height || width || 0);\n            }\n        }\n    });\n    SVG.Text = SVG.invent({\n        // Initialize node\n        create: function create() {\n            this.constructor.call(this, SVG.create('text'));\n            this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding\n\n            this._rebuild = true; // enable automatic updating of dy values\n\n            this._build = false; // disable build mode for adding multiple lines\n            // set default font\n\n            this.attr('font-family', SVG.defaults.attrs['font-family']);\n        },\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Move over x-axis\n            x: function x(_x5) {\n                // act as getter\n                if (_x5 == null) {\n                    return this.attr('x');\n                }\n\n                return this.attr('x', _x5);\n            },\n            // Set the text content\n            text: function text(_text) {\n                // act as getter\n                if (typeof _text === 'undefined') {\n                    var _text = '';\n                    var children = this.node.childNodes;\n\n                    for (var i = 0, len = children.length; i < len; ++i) {\n                        // add newline if its not the first child and newLined is set to true\n                        if (i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true) {\n                            _text += '\\n';\n                        } // add content of this node\n\n\n                        _text += children[i].textContent;\n                    }\n\n                    return _text;\n                } // remove existing content\n\n\n                this.clear().build(true);\n\n                if (typeof _text === 'function') {\n                    // call block\n                    _text.call(this, this);\n                } else {\n                    // store text and make sure text is not blank\n                    _text = _text.split('\\n'); // build new lines\n\n                    for (var i = 0, il = _text.length; i < il; i++) {\n                        this.tspan(_text[i]).newLine();\n                    }\n                } // disable build mode and rebuild lines\n\n\n                return this.build(false).rebuild();\n            },\n            // Set font size\n            size: function size(_size) {\n                return this.attr('font-size', _size).rebuild();\n            },\n            // Set / get leading\n            leading: function leading(value) {\n                // act as getter\n                if (value == null) {\n                    return this.dom.leading;\n                } // act as setter\n\n\n                this.dom.leading = new SVG.Number(value);\n                return this.rebuild();\n            },\n            // Get all the first level lines\n            lines: function lines() {\n                var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances\n\n                var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el) {\n                    return SVG.adopt(el);\n                }); // return an instance of SVG.set\n\n                return new SVG.Set(lines);\n            },\n            // Rebuild appearance type\n            rebuild: function rebuild(_rebuild) {\n                // store new rebuild flag if given\n                if (typeof _rebuild === 'boolean') {\n                    this._rebuild = _rebuild;\n                } // define position of all lines\n\n\n                if (this._rebuild) {\n                    var self = this,\n                        blankLineOffset = 0,\n                        dy = this.dom.leading * new SVG.Number(this.attr('font-size'));\n                    this.lines().each(function() {\n                        if (this.dom.newLined) {\n                            if (!self.textPath()) {\n                                this.attr('x', self.attr('x'));\n                            }\n\n                            if (this.text() == '\\n') {\n                                blankLineOffset += dy;\n                            } else {\n                                this.attr('dy', dy + blankLineOffset);\n                                blankLineOffset = 0;\n                            }\n                        }\n                    });\n                    this.fire('rebuild');\n                }\n\n                return this;\n            },\n            // Enable / disable build mode\n            build: function build(_build) {\n                this._build = !!_build;\n                return this;\n            },\n            // overwrite method from parent to set data properly\n            setData: function setData(o) {\n                this.dom = o;\n                this.dom.leading = new SVG.Number(o.leading || 1.3);\n                return this;\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create text element\n            text: function text(_text2) {\n                return this.put(new SVG.Text()).text(_text2);\n            },\n            // Create plain text element\n            plain: function plain(text) {\n                return this.put(new SVG.Text()).plain(text);\n            }\n        }\n    });\n    SVG.Tspan = SVG.invent({\n        // Initialize node\n        create: 'tspan',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Set text content\n            text: function text(_text3) {\n                if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n                typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);\n                return this;\n            },\n            // Shortcut dx\n            dx: function dx(_dx) {\n                return this.attr('dx', _dx);\n            },\n            // Shortcut dy\n            dy: function dy(_dy) {\n                return this.attr('dy', _dy);\n            },\n            // Create new line\n            newLine: function newLine() {\n                // fetch text parent\n                var t = this.parent(SVG.Text); // mark new line\n\n                this.dom.newLined = true; // apply new hy¡n\n\n                return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());\n            }\n        }\n    });\n    SVG.extend(SVG.Text, SVG.Tspan, {\n        // Create plain text node\n        plain: function plain(text) {\n            // clear if build mode is disabled\n            if (this._build === false) {\n                this.clear();\n            } // create text node\n\n\n            this.node.appendChild(document.createTextNode(text));\n            return this;\n        },\n        // Create a tspan\n        tspan: function tspan(text) {\n            var node = (this.textPath && this.textPath() || this).node,\n                tspan = new SVG.Tspan(); // clear if build mode is disabled\n\n            if (this._build === false) {\n                this.clear();\n            } // add new tspan\n\n\n            node.appendChild(tspan.node);\n            return tspan.text(text);\n        },\n        // Clear all lines\n        clear: function clear() {\n            var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes\n\n            while (node.hasChildNodes()) {\n                node.removeChild(node.lastChild);\n            }\n\n            return this;\n        },\n        // Get length of text element\n        length: function length() {\n            return this.node.getComputedTextLength();\n        }\n    });\n    SVG.TextPath = SVG.invent({\n        // Initialize node\n        create: 'textPath',\n        // Inherit from\n        inherit: SVG.Parent,\n        // Define parent class\n        parent: SVG.Text,\n        // Add parent method\n        construct: {\n            morphArray: SVG.PathArray,\n            // return the array of the path track element\n            array: function array() {\n                var track = this.track();\n                return track ? track.array() : null;\n            },\n            // Plot path if any\n            plot: function plot(d) {\n                var track = this.track(),\n                    pathArray = null;\n\n                if (track) {\n                    pathArray = track.plot(d);\n                }\n\n                return d == null ? pathArray : this;\n            },\n            // Get the path track element\n            track: function track() {\n                var path = this.textPath();\n\n                if (path) {\n                    return path.reference('href');\n                }\n            },\n            // Get the textPath child\n            textPath: function textPath() {\n                if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') {\n                    return SVG.adopt(this.node.firstChild);\n                }\n            }\n        }\n    });\n    SVG.Nested = SVG.invent({\n        // Initialize node\n        create: function create() {\n            this.constructor.call(this, SVG.create('svg'));\n            this.style('overflow', 'visible');\n        },\n        // Inherit from\n        inherit: SVG.Container,\n        // Add parent method\n        construct: {\n            // Create nested svg document\n            nested: function nested() {\n                return this.put(new SVG.Nested());\n            }\n        }\n    }); // Define list of available attributes for stroke and fill\n\n    var sugar = {\n            stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n            fill: ['color', 'opacity', 'rule'],\n            prefix: function prefix(t, a) {\n                return a == 'color' ? t : t + '-' + a;\n            }\n        } // Add sugar for fill and stroke\n    ;\n    ['fill', 'stroke'].forEach(function(m) {\n        var extension = {};\n\n        extension[m] = function(o) {\n            if (typeof o === 'undefined') {\n                return this;\n            }\n\n            if (typeof o === 'string' || SVG.Color.isRgb(o) || o && typeof o.fill === 'function') {\n                this.attr(m, o);\n            } else // set all attributes from sugar.fill and sugar.stroke list\n            {\n                for (var i = sugar[m].length - 1; i >= 0; i--) {\n                    if (o[sugar[m][i]] != null) {\n                        this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n                    }\n                }\n            }\n\n            return this;\n        };\n\n        SVG.extend(SVG.Element, SVG.FX, extension);\n    });\n    SVG.extend(SVG.Element, SVG.FX, {\n        // Map translate to transform\n        translate: function translate(x, y) {\n            return this.transform({\n                x: x,\n                y: y\n            });\n        },\n        // Map matrix to transform\n        matrix: function matrix(m) {\n            return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m));\n        },\n        // Opacity\n        opacity: function opacity(value) {\n            return this.attr('opacity', value);\n        },\n        // Relative move over x axis\n        dx: function dx(x) {\n            return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);\n        },\n        // Relative move over y axis\n        dy: function dy(y) {\n            return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);\n        }\n    });\n    SVG.extend(SVG.Path, {\n        // Get path length\n        length: function length() {\n            return this.node.getTotalLength();\n        },\n        // Get point at length\n        pointAt: function pointAt(length) {\n            return this.node.getPointAtLength(length);\n        }\n    });\n    SVG.Set = SVG.invent({\n        // Initialize\n        create: function create(members) {\n            // Set initial state\n            Array.isArray(members) ? this.members = members : this.clear();\n        },\n        // Add class methods\n        extend: {\n            // Add element to set\n            add: function add() {\n                var il,\n                    elements = [].slice.call(arguments);\n\n                for (var i = 0, il = elements.length; i < il; i++) {\n                    this.members.push(elements[i]);\n                }\n\n                return this;\n            },\n            // Remove element from set\n            remove: function remove(element) {\n                var i = this.index(element); // remove given child\n\n                if (i > -1) {\n                    this.members.splice(i, 1);\n                }\n\n                return this;\n            },\n            // Iterate over all members\n            each: function each(block) {\n                for (var i = 0, il = this.members.length; i < il; i++) {\n                    block.apply(this.members[i], [i, this.members]);\n                }\n\n                return this;\n            },\n            // Restore to defaults\n            clear: function clear() {\n                // initialize store\n                this.members = [];\n                return this;\n            },\n            // Get the length of a set\n            length: function length() {\n                return this.members.length;\n            },\n            // Checks if a given element is present in set\n            has: function has(element) {\n                return this.index(element) >= 0;\n            },\n            // retuns index of given element in set\n            index: function index(element) {\n                return this.members.indexOf(element);\n            },\n            // Get member at given index\n            get: function get(i) {\n                return this.members[i];\n            },\n            // Get first member\n            first: function first() {\n                return this.get(0);\n            },\n            // Get last member\n            last: function last() {\n                return this.get(this.members.length - 1);\n            },\n            // Default value\n            valueOf: function valueOf() {\n                return this.members;\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a new set\n            set: function set(members) {\n                return new SVG.Set(members);\n            }\n        }\n    });\n    SVG.FX.Set = SVG.invent({\n        // Initialize node\n        create: function create(set) {\n            // store reference to set\n            this.set = set;\n        }\n    }); // Alias methods\n\n    SVG.Set.inherit = function() {\n        var methods = []; // gather shape methods\n\n        for (var m in SVG.Shape.prototype) {\n            if (typeof SVG.Shape.prototype[m] === 'function' && typeof SVG.Set.prototype[m] !== 'function') {\n                methods.push(m);\n            }\n        } // apply shape aliasses\n\n\n        methods.forEach(function(method) {\n            SVG.Set.prototype[method] = function() {\n                for (var i = 0, il = this.members.length; i < il; i++) {\n                    if (this.members[i] && typeof this.members[i][method] === 'function') {\n                        this.members[i][method].apply(this.members[i], arguments);\n                    }\n                }\n\n                return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;\n            };\n        }); // clear methods for the next round\n\n        methods = []; // gather fx methods\n\n        for (var m in SVG.FX.prototype) {\n            if (typeof SVG.FX.prototype[m] === 'function' && typeof SVG.FX.Set.prototype[m] !== 'function') {\n                methods.push(m);\n            }\n        } // apply fx aliasses\n\n\n        methods.forEach(function(method) {\n            SVG.FX.Set.prototype[method] = function() {\n                for (var i = 0, il = this.set.members.length; i < il; i++) {\n                    this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);\n                }\n\n                return this;\n            };\n        });\n    };\n\n    SVG.extend(SVG.Element, {});\n    SVG.extend(SVG.Element, {\n        // Remember arbitrary data\n        remember: function remember(k, v) {\n            // remember every item in an object individually\n            if (_typeof(arguments[0]) === 'object') {\n                for (var v_ in k) {\n                    this.remember(v_, k[v_]);\n                }\n            } // retrieve memory\n            else if (arguments.length == 1) {\n                return this.memory()[k];\n            } // store memory\n            else {\n                this.memory()[k] = v;\n            }\n\n            return this;\n        },\n        // Erase a given memory\n        forget: function forget() {\n            if (arguments.length == 0) {\n                this._memory = {};\n            } else {\n                for (var i = arguments.length - 1; i >= 0; i--) {\n                    delete this.memory()[arguments[i]];\n                }\n            }\n\n            return this;\n        },\n        // Initialize or return local memory object\n        memory: function memory() {\n            return this._memory || (this._memory = {});\n        }\n    }); // Method for getting an element by id\n\n    SVG.get = function(id) {\n        var node = document.getElementById(idFromReference(id) || id);\n        return SVG.adopt(node);\n    }; // Select elements by query string\n\n\n    SVG.select = function(query, parent) {\n        return new SVG.Set(SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\n            return SVG.adopt(node);\n        }));\n    };\n\n    SVG.extend(SVG.Parent, {\n        // Scoped select method\n        select: function select(query) {\n            return SVG.select(query, this.node);\n        }\n    });\n\n    function pathRegReplace(a, b, c, d) {\n        return c + d.replace(SVG.regex.dots, ' .');\n    } // creates deep clone of array\n\n\n    function _is(el, obj) {\n        return el instanceof obj;\n    } // tests if a given selector matches an element\n\n\n    function _matches(el, selector) {\n        return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n    } // Convert dash-separated-string to camelCase\n\n\n    function camelCase(s) {\n        return s.toLowerCase().replace(/-(.)/g, function(m, g) {\n            return g.toUpperCase();\n        });\n    } // Capitalize first letter of a string\n\n\n    function capitalize(s) {\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    } // Ensure to six-based hex\n\n\n    function fullHex(hex) {\n        return hex.length == 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n    } // Component to hex value\n\n\n    function compToHex(comp) {\n        var hex = comp.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    } // Calculate proportional width and height values when necessary\n\n\n    function proportionalSize(element, width, height) {\n        if (width == null || height == null) {\n            var box = element.bbox();\n\n            if (width == null) {\n                width = box.width / box.height * height;\n            } else if (height == null) {\n                height = box.height / box.width * width;\n            }\n        }\n\n        return {\n            width: width,\n            height: height\n        };\n    } // Delta transform point\n\n\n    function deltaTransformPoint(matrix, x, y) {\n        return {\n            x: x * matrix.a + y * matrix.c + 0,\n            y: x * matrix.b + y * matrix.d + 0\n        };\n    } // Map matrix array to object\n\n\n    function arrayToMatrix(a) {\n        return {\n            a: a[0],\n            b: a[1],\n            c: a[2],\n            d: a[3],\n            e: a[4],\n            f: a[5]\n        };\n    } // Parse matrix if required\n\n\n    function parseMatrix(matrix) {\n        if (!(matrix instanceof SVG.Matrix)) {\n            matrix = new SVG.Matrix(matrix);\n        }\n\n        return matrix;\n    } // Add centre point to transform object\n\n\n    function arrayToString(a) {\n        for (var i = 0, il = a.length, s = ''; i < il; i++) {\n            s += a[i][0];\n\n            if (a[i][1] != null) {\n                s += a[i][1];\n\n                if (a[i][2] != null) {\n                    s += ' ';\n                    s += a[i][2];\n\n                    if (a[i][3] != null) {\n                        s += ' ';\n                        s += a[i][3];\n                        s += ' ';\n                        s += a[i][4];\n\n                        if (a[i][5] != null) {\n                            s += ' ';\n                            s += a[i][5];\n                            s += ' ';\n                            s += a[i][6];\n\n                            if (a[i][7] != null) {\n                                s += ' ';\n                                s += a[i][7];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s + ' ';\n    } // Deep new id assignment\n\n\n    function assignNewId(node) {\n        // do the same for SVG child nodes as well\n        for (var i = node.childNodes.length - 1; i >= 0; i--) {\n            if (node.childNodes[i] instanceof window.SVGElement) {\n                assignNewId(node.childNodes[i]);\n            }\n        }\n\n        return SVG.adopt(node).id(SVG.eid(node.nodeName));\n    } // Add more bounding box properties\n\n\n    function fullBox(b) {\n        if (b.x == null) {\n            b.x = 0;\n            b.y = 0;\n            b.width = 0;\n            b.height = 0;\n        }\n\n        b.w = b.width;\n        b.h = b.height;\n        b.x2 = b.x + b.width;\n        b.y2 = b.y + b.height;\n        b.cx = b.x + b.width / 2;\n        b.cy = b.y + b.height / 2;\n        return b;\n    } // Get id from reference string\n\n\n    function idFromReference(url) {\n        var m = (url || '').toString().match(SVG.regex.reference);\n        if (m) return m[1];\n    } // If values like 1e-88 are passed, this is not a valid 32 bit float,\n    // but in those cases, we are so close to 0 that 0 works well!\n\n\n    function float32String(v) {\n        return Math.abs(v) > 1e-37 ? v : 0;\n    } // Create matrix array for looping\n\n\n    var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10\n\n    if (typeof window.CustomEvent !== 'function') {\n        // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n        var CustomEventPoly = function CustomEventPoly(event, options) {\n            options = options || {\n                bubbles: false,\n                cancelable: false,\n                detail: undefined\n            };\n            var e = document.createEvent('CustomEvent');\n            e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);\n            return e;\n        };\n\n        CustomEventPoly.prototype = window.Event.prototype;\n        SVG.CustomEvent = CustomEventPoly;\n    } else {\n        SVG.CustomEvent = window.CustomEvent;\n    }\n\n    return SVG;\n});"],"file":"svg.min.js"}