{"version":3,"sources":["svg.js"],"names":["define","SVG","this","window","element","supported","Doc","parser","draw","prepare","ns","xmlns","xlink","svgjs","did","eid","name","capitalize","create","document","createElementNS","setAttribute","extend","modules","methods","slice","call","arguments","pop","i","length","key","prototype","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","size","style","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","x","y","cx","cy","width","height","r","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","value","isArray","split","PointArray","pathHandlers","M","c","p","p0","L","H","V","C","Q","Z","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","s","arrayToString","move","box","bbox","sourceArray","destinationArray","pathArray","paramCnt","S","T","A","pathRegReplace","trim","reduce","prev","curr","concat","arr","Point","index","len","parseFloat","getBBox","Number","unit","isNaN","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","dom","_x","attr","_y","center","_width","_height","proportionalSize","clone","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","_id","show","hide","visible","classes","hasClass","indexOf","addClass","removeClass","toggleClass","get","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","_matches","svg","_svg","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","removeAttribute","Object","keys","stringify","o","is","obj","_is","easing","-","<>","Math","cos","PI",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","bind","cancelAnimationFrame","startCurrent","initAnimations","fn","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","last","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","_delay","real","v","plot","d","Box","left","top","w","h","x2","y2","fullBox","BBox","contains","topParent","Error","Shape","clientLeft","clientTop","clientWidth","clientHeight","base","arrayToMatrix","abcdef","px","deltaTransformPoint","skewX","atan2","f","transformedX","sqrt","transformedY","rotation","parseMatrix","inverse","translate","createSVGMatrix","float32String","ctm","getCTM","screenCTM","rect","m","getScreenCTM","point","transform","n","attributes","nodeValue","v_","image","Image","pattern","leading","setAttributeNS","rebuild","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","Translate","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","Infinity","flatten","ViewBox","forEach","event","listeners","handlerMap","listenerId","listener","binding","options","l","ev","_svgjsListenerId","passive","removeEventListener","listener_","event_","data","Event","dispatchEvent","CustomEvent","cancelable","G","_x2","group","getElementById","version","nextSibling","Stop","update","gradient","fy","x1","y1","Pattern","patternUnits","Symbol","symbol","Use","_element","file","use","Rect","Circle","circle","_rx","_ry","Ellipse","ellipse","_rx2","_ry2","_x3","_y2","_width2","_height2","Line","toLine","line","Polyline","Polygon","polygon","_array","morphArray","_x4","_y3","_width3","_height3","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","Text","_rebuild","_build","_x5","text","_text","nodeType","newLined","textContent","build","tspan","newLine","_size","textPath","blankLineOffset","dy","_text2","plain","Tspan","_text3","dx","_dx","_dy","t","createTextNode","getComputedTextLength","TextPath","track","sugar","prefix","toLowerCase","charAt","comp","abs","extension","getTotalLength","pointAt","getPointAtLength","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","undefined","createEvent","initCustomEvent"],"mappings":"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","sourcesContent":["define('local_edwiserreports/chart/svg', [], function() {\n    // Find global reference - uses 'this' by default when available,\n    // falls back to 'window' otherwise (for bundlers like Webpack)\n    var globalRef = typeof this !== 'undefined' ? this : window; // The main wrapping element\n\n    var SVG = globalRef.SVG = function(element) {\n        if (SVG.supported) {\n            element = new SVG.Doc(element);\n\n            if (!SVG.parser.draw) {\n                SVG.prepare();\n            }\n\n            return element;\n        }\n    }; // Default namespaces\n\n\n    SVG.ns = 'http://www.w3.org/2000/svg';\n    SVG.xmlns = 'http://www.w3.org/2000/xmlns/';\n    SVG.xlink = 'http://www.w3.org/1999/xlink';\n    SVG.svgjs = 'http://svgjs.com/svgjs'; // Svg support test\n\n    SVG.supported = function() {\n        return true; // !!document.createElementNS &&\n        //     !! document.createElementNS(SVG.ns,'svg').createSVGRect\n    }(); // Don't bother to continue if SVG is not supported\n\n\n    if (!SVG.supported) return false; // Element id sequence\n\n    SVG.did = 1000; // Get next named element id\n\n    SVG.eid = function(name) {\n        return 'Svgjs' + capitalize(name) + SVG.did++;\n    }; // Method for element creation\n\n\n    SVG.create = function(name) {\n        // create element\n        var element = document.createElementNS(this.ns, name); // apply unique id\n\n        element.setAttribute('id', this.eid(name));\n        return element;\n    }; // Method for extending objects\n\n\n    SVG.extend = function() {\n        var modules, methods; // Get list of modules\n\n        modules = [].slice.call(arguments); // Get object with extensions\n\n        methods = modules.pop();\n\n        for (var i = modules.length - 1; i >= 0; i--) {\n            if (modules[i]) {\n                for (var key in methods) {\n                    modules[i].prototype[key] = methods[key];\n                }\n            }\n        } // Make sure SVG.Set inherits any newly added methods\n\n\n        if (SVG.Set && SVG.Set.inherit) {\n            SVG.Set.inherit();\n        }\n    }; // Invent new element\n\n\n    SVG.invent = function(config) {\n        // Create element initializer\n        var initializer = typeof config.create === 'function' ? config.create : function() {\n            this.constructor.call(this, SVG.create(config.create));\n        }; // Inherit prototype\n\n        if (config.inherit) {\n            initializer.prototype = new config.inherit();\n        } // Extend with methods\n\n\n        if (config.extend) {\n            SVG.extend(initializer, config.extend);\n        } // Attach construct method to parent\n\n\n        if (config.construct) {\n            SVG.extend(config.parent || SVG.Container, config.construct);\n        }\n\n        return initializer;\n    }; // Adopt existing svg elements\n\n\n    SVG.adopt = function(node) {\n        // check for presence of node\n        if (!node) return null; // make sure a node isn't already adopted\n\n        if (node.instance) return node.instance; // initialize variables\n\n        var element; // adopt with element-specific settings\n\n        if (node.nodeName == 'svg') {\n            element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();\n        } else if (node.nodeName == 'linearGradient') {\n            element = new SVG.Gradient('linear');\n        } else if (node.nodeName == 'radialGradient') {\n            element = new SVG.Gradient('radial');\n        } else if (SVG[capitalize(node.nodeName)]) {\n            element = new SVG[capitalize(node.nodeName)]();\n        } else {\n            element = new SVG.Element(node);\n        } // ensure references\n\n\n        element.type = node.nodeName;\n        element.node = node;\n        node.instance = element; // SVG.Class specific preparations\n\n        if (element instanceof SVG.Doc) {\n            element.namespace().defs();\n        } // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n\n\n        element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n        return element;\n    }; // Initialize parsing element\n\n\n    SVG.prepare = function() {\n        // Select document body and create invisible svg element\n        var body = document.getElementsByTagName('body')[0],\n            draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object\n\n        SVG.parser = {\n            body: body || document.documentElement,\n            draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node,\n            poly: draw.polyline().node,\n            path: draw.path().node,\n            native: SVG.create('svg')\n        };\n    };\n\n    SVG.parser = {\n        native: SVG.create('svg')\n    };\n    document.addEventListener('DOMContentLoaded', function() {\n        if (!SVG.parser.draw) {\n            SVG.prepare();\n        }\n    }, false); // Storage for regular expressions\n\n    SVG.regex = {\n        // Parse unit value\n        numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n        // Parse hex value\n        hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n        // Parse rgb value\n        rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n        // Parse reference id\n        reference: /#([a-z0-9\\-_]+)/i,\n        // splits a transformation chain\n        transforms: /\\)\\s*,?\\s*/,\n        // Whitespace\n        whitespace: /\\s/g,\n        // Test hex value\n        isHex: /^#[a-f0-9]{3,6}$/i,\n        // Test rgb value\n        isRgb: /^rgb\\(/,\n        // Test css declaration\n        isCss: /[^:]+:[^;]+;?/,\n        // Test for blank string\n        isBlank: /^(\\s+)?$/,\n        // Test for numeric string\n        isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        // Test for percent value\n        isPercent: /^-?[\\d\\.]+%$/,\n        // Test for image url\n        isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n        // split at whitespace and comma\n        delimiter: /[\\s,]+/,\n        // The following regex are used to parse the d attribute of a path\n        // Matches all hyphens which are not after an exponent\n        hyphen: /([^e])\\-/gi,\n        // Replaces and tests for all path letters\n        pathLetters: /[MLHVCSQTAZ]/gi,\n        // yes we need this one, too\n        isPathLetter: /[MLHVCSQTAZ]/i,\n        // matches 0.154.23.45\n        numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n        // matches .\n        dots: /\\./g\n    };\n    SVG.utils = {\n        // Map function\n        map: function map(array, block) {\n            var il = array.length,\n                result = [];\n\n            for (var i = 0; i < il; i++) {\n                result.push(block(array[i]));\n            }\n\n            return result;\n        },\n        // Filter function\n        filter: function filter(array, block) {\n            var il = array.length,\n                result = [];\n\n            for (var i = 0; i < il; i++) {\n                if (block(array[i])) {\n                    result.push(array[i]);\n                }\n            }\n\n            return result;\n        },\n        filterSVGElements: function filterSVGElements(nodes) {\n            return this.filter(nodes, function(el) {\n                return el instanceof window.SVGElement;\n            });\n        }\n    };\n    SVG.defaults = {\n        // Default attribute values\n        attrs: {\n            // fill and stroke\n            'fill-opacity': 1,\n            'stroke-opacity': 1,\n            'stroke-width': 0,\n            'stroke-linejoin': 'miter',\n            'stroke-linecap': 'butt',\n            fill: '#000000',\n            stroke: '#000000',\n            opacity: 1,\n            // position\n            x: 0,\n            y: 0,\n            cx: 0,\n            cy: 0,\n            // size\n            width: 0,\n            height: 0,\n            // radius\n            r: 0,\n            rx: 0,\n            ry: 0,\n            // gradient\n            offset: 0,\n            'stop-opacity': 1,\n            'stop-color': '#000000',\n            // text\n            'font-size': 16,\n            'font-family': 'Helvetica, Arial, sans-serif',\n            'text-anchor': 'start'\n        }\n    }; // Module for color convertions\n\n    SVG.Color = function(color) {\n        var match; // initialize defaults\n\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        if (!color) return; // parse color\n\n        if (typeof color === 'string') {\n            if (SVG.regex.isRgb.test(color)) {\n                // get rgb values\n                match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values\n\n                this.r = parseInt(match[1]);\n                this.g = parseInt(match[2]);\n                this.b = parseInt(match[3]);\n            } else if (SVG.regex.isHex.test(color)) {\n                // get hex values\n                match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values\n\n                this.r = parseInt(match[1], 16);\n                this.g = parseInt(match[2], 16);\n                this.b = parseInt(match[3], 16);\n            }\n        } else if (typeof(color) === 'object') {\n            this.r = color.r;\n            this.g = color.g;\n            this.b = color.b;\n        }\n    };\n\n    SVG.extend(SVG.Color, {\n        // Default to hex conversion\n        toString: function toString() {\n            return this.toHex();\n        },\n        // Build hex value\n        toHex: function toHex() {\n            return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);\n        },\n        // Build rgb value\n        toRgb: function toRgb() {\n            return 'rgb(' + [this.r, this.g, this.b].join() + ')';\n        },\n        // Calculate true brightness\n        brightness: function brightness() {\n            return this.r / 255 * 0.30 + this.g / 255 * 0.59 + this.b / 255 * 0.11;\n        },\n        // Make color morphable\n        morph: function morph(color) {\n            this.destination = new SVG.Color(color);\n            return this;\n        },\n        // Get morphed color at given position\n        at: function at(pos) {\n            // make sure a destination is defined\n            if (!this.destination) return this; // normalise pos\n\n            pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color\n\n            return new SVG.Color({\n                r: ~~(this.r + (this.destination.r - this.r) * pos),\n                g: ~~(this.g + (this.destination.g - this.g) * pos),\n                b: ~~(this.b + (this.destination.b - this.b) * pos)\n            });\n        }\n    }); // Testers\n    // Test if given value is a color string\n\n    SVG.Color.test = function(color) {\n        color += '';\n        return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);\n    }; // Test if given value is a rgb object\n\n\n    SVG.Color.isRgb = function(color) {\n        return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n    }; // Test if given value is a color\n\n\n    SVG.Color.isColor = function(color) {\n        return SVG.Color.isRgb(color) || SVG.Color.test(color);\n    }; // Module for array conversion\n\n\n    SVG.Array = function(array, fallback) {\n        array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback\n\n        if (array.length == 0 && fallback) {\n            array = fallback.valueOf();\n        } // parse array\n\n\n        this.value = this.parse(array);\n    };\n\n    SVG.extend(SVG.Array, {\n        // Convert array to string\n        toString: function toString() {\n            return this.value.join(' ');\n        },\n        // Real value\n        valueOf: function valueOf() {\n            return this.value;\n        },\n        // Parse whitespace separated string\n        parse: function parse(array) {\n            array = array.valueOf(); // if already is an array, no need to parse it\n\n            if (Array.isArray(array)) return array;\n            return this.split(array);\n        }\n    }); // Poly points array\n\n    SVG.PointArray = function(array, fallback) {\n        SVG.Array.call(this, array, fallback || [\n            [0, 0]\n        ]);\n    }; // Inherit from SVG.Array\n\n\n    SVG.PointArray.prototype = new SVG.Array();\n    SVG.PointArray.prototype.constructor = SVG.PointArray;\n    var pathHandlers = {\n        M: function M(c, p, p0) {\n            p.x = p0.x = c[0];\n            p.y = p0.y = c[1];\n            return ['M', p.x, p.y];\n        },\n        L: function L(c, p) {\n            p.x = c[0];\n            p.y = c[1];\n            return ['L', c[0], c[1]];\n        },\n        H: function H(c, p) {\n            p.x = c[0];\n            return ['H', c[0]];\n        },\n        V: function V(c, p) {\n            p.y = c[0];\n            return ['V', c[0]];\n        },\n        C: function C(c, p) {\n            p.x = c[4];\n            p.y = c[5];\n            return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n        },\n        Q: function Q(c, p) {\n            p.x = c[2];\n            p.y = c[3];\n            return ['Q', c[0], c[1], c[2], c[3]];\n        },\n        Z: function Z(c, p, p0) {\n            p.x = p0.x;\n            p.y = p0.y;\n            return ['Z'];\n        }\n    };\n    var mlhvqtcsa = 'mlhvqtcsaz'.split('');\n\n    for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {\n        pathHandlers[mlhvqtcsa[i]] = function(i) {\n            return function(c, p, p0) {\n                if (i == 'H') c[0] = c[0] + p.x;\n                else if (i == 'V') c[0] = c[0] + p.y;\n                else if (i == 'A') {\n                    c[5] = c[5] + p.x, c[6] = c[6] + p.y;\n                } else {\n                    for (var j = 0, jl = c.length; j < jl; ++j) {\n                        c[j] = c[j] + (j % 2 ? p.y : p.x);\n                    }\n                }\n                return pathHandlers[i](c, p, p0);\n            };\n        }(mlhvqtcsa[i].toUpperCase());\n    } // Path points array\n\n\n    SVG.PathArray = function(array, fallback) {\n        SVG.Array.call(this, array, fallback || [\n            ['M', 0, 0]\n        ]);\n    }; // Inherit from SVG.Array\n\n\n    SVG.PathArray.prototype = new SVG.Array();\n    SVG.PathArray.prototype.constructor = SVG.PathArray;\n    SVG.extend(SVG.PathArray, {\n        // Convert array to string\n        toString: function toString() {\n            return arrayToString(this.value);\n        },\n        // Move path string\n        move: function move(x, y) {\n            // get bounding box of current situation\n            var box = this.bbox(); // get relative offset\n\n            x -= box.x;\n            y -= box.y;\n            return this;\n        },\n        // Get morphed path array at given position\n        at: function at(pos) {\n            // make sure a destination is defined\n            if (!this.destination) return this;\n            var sourceArray = this.value,\n                destinationArray = this.destination.value,\n                array = [],\n                pathArray = new SVG.PathArray(),\n                il,\n                jl; // Animate has specified in the SVG spec\n            // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n            for (var i = 0, il = sourceArray.length; i < il; i++) {\n                array[i] = [sourceArray[i][0]];\n\n                for (var j = 1, jl = sourceArray[i].length; j < jl; j++) {\n                    array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n                } // For the two flags of the elliptical arc command, the SVG spec say:\n                // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n                // Elliptical arc command as an array followed by corresponding indexes:\n                // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n                //   0    1   2        3                 4             5      6  7\n\n\n                if (array[i][0] === 'A') {\n                    array[i][4] = +(array[i][4] != 0);\n                    array[i][5] = +(array[i][5] != 0);\n                }\n            } // Directly modify the value of a path array, this is done this way for performance\n\n\n            pathArray.value = array;\n            return pathArray;\n        },\n        // Absolutize and parse path to array\n        parse: function parse(array) {\n            // if it's already a patharray, no need to parse it\n            if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing\n\n            var s,\n                arr,\n                paramCnt = {\n                    'M': 2,\n                    'L': 2,\n                    'H': 1,\n                    'V': 1,\n                    'C': 6,\n                    'S': 4,\n                    'Q': 4,\n                    'T': 2,\n                    'A': 7,\n                    'Z': 0\n                };\n\n            if (typeof array === 'string') {\n                array = array.replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n                    .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n                    .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen\n                    .trim() // trim\n                    .split(SVG.regex.delimiter); // split into array\n            } else {\n                array = array.reduce(function(prev, curr) {\n                    return [].concat.call(prev, curr);\n                }, []);\n            } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n            var arr = [],\n                p = new SVG.Point(),\n                p0 = new SVG.Point(),\n                index = 0,\n                len = array.length;\n\n            do {\n                // Test if we have a path letter\n                if (SVG.regex.isPathLetter.test(array[index])) {\n                    s = array[index];\n                    ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n                } else if (s == 'M') {\n                    s = 'L';\n                } else if (s == 'm') {\n                    s = 'l';\n                }\n\n                arr.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n            } while (len > index);\n\n            return arr;\n        },\n        // Get bounding box of path\n        bbox: function bbox() {\n            if (!SVG.parser.draw) {\n                SVG.prepare();\n            }\n\n            SVG.parser.path.setAttribute('d', this.toString());\n            return SVG.parser.path.getBBox();\n        }\n    }); // Module for unit convertions\n\n    SVG.Number = SVG.invent({\n        // Initialize\n        create: function create(value, unit) {\n            // initialize defaults\n            this.value = 0;\n            this.unit = unit || ''; // parse value\n\n            if (typeof value === 'number') {\n                // ensure a valid numeric value\n                this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n            } else if (typeof value === 'string') {\n                unit = value.match(SVG.regex.numberAndUnit);\n\n                if (unit) {\n                    // make value numeric\n                    this.value = parseFloat(unit[1]); // normalize\n\n                    if (unit[5] == '%') {\n                        this.value /= 100;\n                    } else if (unit[5] == 's') {\n                        this.value *= 1000;\n                    } // store unit\n\n\n                    this.unit = unit[5];\n                }\n            } else {\n                if (value instanceof SVG.Number) {\n                    this.value = value.valueOf();\n                    this.unit = value.unit;\n                }\n            }\n        },\n        // Add methods\n        extend: {\n            // Stringalize\n            toString: function toString() {\n                return (this.unit == '%' ? ~~(this.value * 1e8) / 1e6 : this.unit == 's' ? this.value / 1e3 : this.value) + this.unit;\n            },\n            toJSON: function toJSON() {\n                return this.toString();\n            },\n            // Convert to primitive\n            valueOf: function valueOf() {\n                return this.value;\n            },\n            // Add number\n            plus: function plus(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this + number, this.unit || number.unit);\n            },\n            // Subtract number\n            minus: function minus(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this - number, this.unit || number.unit);\n            },\n            // Multiply number\n            times: function times(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this * number, this.unit || number.unit);\n            },\n            // Divide number\n            divide: function divide(number) {\n                number = new SVG.Number(number);\n                return new SVG.Number(this / number, this.unit || number.unit);\n            },\n            // Convert to different unit\n            to: function to(unit) {\n                var number = new SVG.Number(this);\n\n                if (typeof unit === 'string') {\n                    number.unit = unit;\n                }\n\n                return number;\n            },\n            // Make number morphable\n            morph: function morph(number) {\n                this.destination = new SVG.Number(number);\n\n                if (number.relative) {\n                    this.destination.value += this.value;\n                }\n\n                return this;\n            },\n            // Get morphed number at given position\n            at: function at(pos) {\n                // Make sure a destination is defined\n                if (!this.destination) return this; // Generate new morphed number\n\n                return new SVG.Number(this.destination).minus(this).times(pos).plus(this);\n            }\n        }\n    });\n    SVG.Element = SVG.invent({\n        // Initialize node\n        create: function create(node) {\n            // make stroke value accessible dynamically\n            this._stroke = SVG.defaults.attrs.stroke;\n            this._event = null; // initialize data object\n\n            this.dom = {}; // create circular reference\n\n            if (this.node = node) {\n                this.type = node.nodeName;\n                this.node.instance = this; // store current attribute value\n\n                this._stroke = node.getAttribute('stroke') || this._stroke;\n            }\n        },\n        // Add class methods\n        extend: {\n            // Move over x-axis\n            x: function x(_x) {\n                return this.attr('x', _x);\n            },\n            // Move over y-axis\n            y: function y(_y) {\n                return this.attr('y', _y);\n            },\n            // Move by center over x-axis\n            cx: function cx(x) {\n                return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n            },\n            // Move by center over y-axis\n            cy: function cy(y) {\n                return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n            },\n            // Move element to given x and y values\n            move: function move(x, y) {\n                return this.x(x).y(y);\n            },\n            // Move element by its center\n            center: function center(x, y) {\n                return this.cx(x).cy(y);\n            },\n            // Set width of element\n            width: function width(_width) {\n                return this.attr('width', _width);\n            },\n            // Set height of element\n            height: function height(_height) {\n                return this.attr('height', _height);\n            },\n            // Set element size to given width and height\n            size: function size(width, height) {\n                var p = proportionalSize(this, width, height);\n                return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));\n            },\n            // Clone element\n            clone: function clone(parent) {\n                // write dom data to the dom so the clone can pickup the data\n                this.writeDataToDom(); // clone element and assign new id\n\n                var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n                if (parent) parent.add(clone);\n                else this.after(clone);\n                return clone;\n            },\n            // Remove element\n            remove: function remove() {\n                if (this.parent()) {\n                    this.parent().removeElement(this);\n                }\n\n                return this;\n            },\n            // Replace element\n            replace: function replace(element) {\n                this.after(element).remove();\n                return element;\n            },\n            // Add element to given container and return self\n            addTo: function addTo(parent) {\n                return parent.put(this);\n            },\n            // Add element to given container and return container\n            putIn: function putIn(parent) {\n                return parent.add(this);\n            },\n            // Get / set id\n            id: function id(_id) {\n                return this.attr('id', _id);\n            },\n            // Show element\n            show: function show() {\n                return this.style('display', '');\n            },\n            // Hide element\n            hide: function hide() {\n                return this.style('display', 'none');\n            },\n            // Is element visible?\n            visible: function visible() {\n                return this.style('display') != 'none';\n            },\n            // Return id on string conversion\n            toString: function toString() {\n                return this.attr('id');\n            },\n            // Return array of classes on the node\n            classes: function classes() {\n                var attr = this.attr('class');\n                return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);\n            },\n            // Return true if class exists on the node, false otherwise\n            hasClass: function hasClass(name) {\n                return this.classes().indexOf(name) != -1;\n            },\n            // Add class to the node\n            addClass: function addClass(name) {\n                if (!this.hasClass(name)) {\n                    var array = this.classes();\n                    array.push(name);\n                    this.attr('class', array.join(' '));\n                }\n\n                return this;\n            },\n            // Remove class from the node\n            removeClass: function removeClass(name) {\n                if (this.hasClass(name)) {\n                    this.attr('class', this.classes().filter(function(c) {\n                        return c != name;\n                    }).join(' '));\n                }\n\n                return this;\n            },\n            // Toggle the presence of a class on the node\n            toggleClass: function toggleClass(name) {\n                return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n            },\n            // Get referenced element form attribute value\n            reference: function reference(attr) {\n                return SVG.get(this.attr(attr));\n            },\n            // Returns the parent element instance\n            parent: function parent(type) {\n                var parent = this; // check for parent\n\n                if (!parent.node.parentNode) return null; // get parent element\n\n                parent = SVG.adopt(parent.node.parentNode);\n                if (!type) return parent; // loop trough ancestors if type is given\n\n                while (parent && parent.node instanceof window.SVGElement) {\n                    if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n                    if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document') return null; // #759, #720\n\n                    parent = SVG.adopt(parent.node.parentNode);\n                }\n            },\n            // Get parent document\n            doc: function doc() {\n                return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);\n            },\n            // return array of all ancestors of given type up to the root svg\n            parents: function parents(type) {\n                var parents = [],\n                    parent = this;\n\n                do {\n                    parent = parent.parent(type);\n                    if (!parent || !parent.node) break;\n                    parents.push(parent);\n                } while (parent.parent);\n\n                return parents;\n            },\n            // matches the element vs a css selector\n            matches: function matches(selector) {\n                return _matches(this.node, selector);\n            },\n            // Returns the svg node to call native svg methods on it\n            native: function native() {\n                return this.node;\n            },\n            // Import raw svg\n            svg: function svg(_svg) {\n                // create temporary holder\n                var well = document.createElement('svg'); // act as a setter if svg is given\n\n                if (_svg && this instanceof SVG.Parent) {\n                    // dump raw svg\n                    well.innerHTML = '<svg>' + _svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'; // transplant nodes\n\n                    for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n                        this.node.appendChild(well.firstChild.firstChild);\n                    } // otherwise act as a getter\n\n                } else {\n                    // create a wrapping svg element in case of partial content\n                    well.appendChild(_svg = document.createElement('svg')); // write svgjs data to the dom\n\n                    this.writeDataToDom(); // insert a copy of this node\n\n                    _svg.appendChild(this.node.cloneNode(true)); // return target element\n\n\n                    return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '');\n                }\n\n                return this;\n            },\n            // write svgjs data to the dom\n            writeDataToDom: function writeDataToDom() {\n                // dump variables recursively\n                if (this.each || this.lines) {\n                    var fn = this.each ? this : this.lines();\n                    fn.each(function() {\n                        this.writeDataToDom();\n                    });\n                } // remove previously set data\n\n\n                this.node.removeAttribute('svgjs:data');\n\n                if (Object.keys(this.dom).length) {\n                    this.node.setAttribute('svgjs:data', JSON.stringify(this.dom));\n                } // see #428\n\n\n                return this;\n            },\n            // set given data to the elements data property\n            setData: function setData(o) {\n                this.dom = o;\n                return this;\n            },\n            is: function is(obj) {\n                return _is(this, obj);\n            }\n        }\n    });\n    SVG.easing = {\n        '-': function _(pos) {\n            return pos;\n        },\n        '<>': function _(pos) {\n            return -Math.cos(pos * Math.PI) / 2 + 0.5;\n        },\n        '>': function _(pos) {\n            return Math.sin(pos * Math.PI / 2);\n        },\n        '<': function _(pos) {\n            return -Math.cos(pos * Math.PI / 2) + 1;\n        }\n    };\n\n    SVG.morph = function(pos) {\n        return function(from, to) {\n            return new SVG.MorphObj(from, to).at(pos);\n        };\n    };\n\n    SVG.Situation = SVG.invent({\n        create: function create(o) {\n            this.init = false;\n            this.reversed = false;\n            this.reversing = false;\n            this.duration = new SVG.Number(o.duration).valueOf();\n            this.delay = new SVG.Number(o.delay).valueOf();\n            this.start = +new Date() + this.delay;\n            this.finish = this.start + this.duration;\n            this.ease = o.ease; // this.loop is incremented from 0 to this.loops\n            // it is also incremented when in an infinite loop (when this.loops is true)\n\n            this.loop = 0;\n            this.loops = false;\n            this.animations = { // functionToCall: [list of morphable objects]\n                // e.g. move: [SVG.Number, SVG.Number]\n            };\n            this.attrs = { // holds all attributes which are not represented from a function svg.js provides\n                // e.g. someAttr: SVG.Number\n            };\n            this.styles = { // holds all styles which should be animated\n                // e.g. fill-color: SVG.Color\n            };\n            this.transforms = [ // holds all transformations as transformation objects\n                // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n            ];\n            this.once = { // functions to fire at a specific position\n                // e.g. \"0.5\": function foo(){}\n            };\n        }\n    });\n    SVG.FX = SVG.invent({\n        create: function create(element) {\n            this._target = element;\n            this.situations = [];\n            this.active = false;\n            this.situation = null;\n            this.paused = false;\n            this.lastPos = 0;\n            this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n            // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n\n            this.absPos = 0;\n            this._speed = 1;\n        },\n        extend: {\n            /**\n             * sets or returns the target of this animation\n             * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n             * @param ease function || string Function which should be used for easing or easing keyword\n             * @param delay Number indicating the delay before the animation starts\n             * @return target || this\n             */\n            animate: function animate(o, ease, delay) {\n                if (typeof(o) === 'object') {\n                    ease = o.ease;\n                    delay = o.delay;\n                    o = o.duration;\n                }\n\n                var situation = new SVG.Situation({\n                    duration: o || 1000,\n                    delay: delay || 0,\n                    ease: SVG.easing[ease || '-'] || ease\n                });\n                this.queue(situation);\n                return this;\n            },\n\n            /**\n             * sets a delay before the next element of the queue is called\n             * @param delay Duration of delay in milliseconds\n             * @return this.target()\n             */\n\n            /**\n             * sets or returns the target of this animation\n             * @param null || target SVG.Element which should be set as new target\n             * @return target || this\n             */\n            target: function target(_target) {\n                if (_target && _target instanceof SVG.Element) {\n                    this._target = _target;\n                    return this;\n                }\n\n                return this._target;\n            },\n            // returns the absolute position at a given time\n            timeToAbsPos: function timeToAbsPos(timestamp) {\n                return (timestamp - this.situation.start) / (this.situation.duration / this._speed);\n            },\n            // returns the timestamp from a given absolute positon\n            absPosToTime: function absPosToTime(absPos) {\n                return this.situation.duration / this._speed * absPos + this.situation.start;\n            },\n            // starts the animationloop\n            startAnimFrame: function startAnimFrame() {\n                this.stopAnimFrame();\n                this.animationFrame = window.requestAnimationFrame(function() {\n                    this.step();\n                }.bind(this));\n            },\n            // cancels the animationframe\n            stopAnimFrame: function stopAnimFrame() {\n                window.cancelAnimationFrame(this.animationFrame);\n            },\n            // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n            start: function start() {\n                // dont start if already started\n                if (!this.active && this.situation) {\n                    this.active = true;\n                    this.startCurrent();\n                }\n\n                return this;\n            },\n            // start the current situation\n            startCurrent: function startCurrent() {\n                this.situation.start = +new Date() + this.situation.delay / this._speed;\n                this.situation.finish = this.situation.start + this.situation.duration / this._speed;\n                return this.initAnimations().step();\n            },\n\n            /**\n             * adds a function / Situation to the animation queue\n             * @param fn function / situation to add\n             * @return this\n             */\n            queue: function queue(fn) {\n                if (typeof fn === 'function' || fn instanceof SVG.Situation) {\n                    this.situations.push(fn);\n                }\n\n                if (!this.situation) this.situation = this.situations.shift();\n                return this;\n            },\n\n            /**\n             * pulls next element from the queue and execute it\n             * @return this\n             */\n            dequeue: function dequeue() {\n                // stop current animation\n                this.stop(); // get next animation from queue\n\n                this.situation = this.situations.shift();\n\n                if (this.situation) {\n                    if (this.situation instanceof SVG.Situation) {\n                        this.start();\n                    } else {\n                        // If it is not a SVG.Situation, then it is a function, we execute it\n                        this.situation.call(this);\n                    }\n                }\n\n                return this;\n            },\n            // updates all animations to the current state of the element\n            // this is important when one property could be changed from another property\n            initAnimations: function initAnimations() {\n                var source;\n                var s = this.situation;\n                if (s.init) return this;\n\n                for (var i in s.animations) {\n                    source = this.target()[i]();\n\n                    if (!Array.isArray(source)) {\n                        source = [source];\n                    }\n\n                    if (!Array.isArray(s.animations[i])) {\n                        s.animations[i] = [s.animations[i]];\n                    } // if(s.animations[i].length > source.length) {\n                    //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\n                    // }\n\n\n                    for (var j = source.length; j--;) {\n                        // The condition is because some methods return a normal number instead\n                        // of a SVG.Number\n                        if (s.animations[i][j] instanceof SVG.Number) {\n                            source[j] = new SVG.Number(source[j]);\n                        }\n\n                        s.animations[i][j] = source[j].morph(s.animations[i][j]);\n                    }\n                }\n\n                for (var i in s.attrs) {\n                    s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);\n                }\n\n                for (var i in s.styles) {\n                    s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);\n                }\n\n                s.initialTransformation = this.target().matrixify();\n                s.init = true;\n                return this;\n            },\n            clearQueue: function clearQueue() {\n                this.situations = [];\n                return this;\n            },\n            clearCurrent: function clearCurrent() {\n                this.situation = null;\n                return this;\n            },\n\n            /** stops the animation immediately\n             * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\n             * @param clearQueue A Boolean indicating whether to remove queued animation as well.\n             * @return this\n             */\n            stop: function stop(jumpToEnd, clearQueue) {\n                var active = this.active;\n                this.active = false;\n\n                if (clearQueue) {\n                    this.clearQueue();\n                }\n\n                if (jumpToEnd && this.situation) {\n                    // initialize the situation if it was not\n                    !active && this.startCurrent();\n                    this.atEnd();\n                }\n\n                this.stopAnimFrame();\n                return this.clearCurrent();\n            },\n            after: function after(fn) {\n                var c = this.last(),\n                    wrapper = function wrapper(e) {\n                        if (e.detail.situation == c) {\n                            fn.call(this, c);\n                            this.off('finished.fx', wrapper); // prevent memory leak\n                        }\n                    };\n\n                this.target().on('finished.fx', wrapper);\n                return this._callStart();\n            },\n            // adds a callback which is called whenever one animation step is performed\n            during: function during(fn) {\n                var c = this.last(),\n                    wrapper = function wrapper(e) {\n                        if (e.detail.situation == c) {\n                            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);\n                        }\n                    }; // see above\n\n\n                this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n                this.after(function() {\n                    this.off('during.fx', wrapper);\n                });\n                return this._callStart();\n            },\n            // calls after ALL animations in the queue are finished\n            afterAll: function afterAll(fn) {\n                var wrapper = function wrapper(e) {\n                    fn.call(this);\n                    this.off('allfinished.fx', wrapper);\n                }; // see above\n\n\n                this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);\n                return this._callStart();\n            },\n            last: function last() {\n                return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n            },\n            // adds one property to the animations\n            add: function add(method, args, type) {\n                this.last()[type || 'animations'][method] = args;\n                return this._callStart();\n            },\n\n            /** perform one step of the animation\n             *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\n             *  @return this\n             */\n            step: function step(ignoreTime) {\n                // convert current time to an absolute position\n                if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position\n\n                if (this.situation.loops !== false) {\n                    var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0\n\n                    absPos = Math.max(this.absPos, 0);\n                    absPosInt = Math.floor(absPos);\n\n                    if (this.situation.loops === true || absPosInt < this.situation.loops) {\n                        this.pos = absPos - absPosInt;\n                        lastLoop = this.situation.loop;\n                        this.situation.loop = absPosInt;\n                    } else {\n                        this.absPos = this.situation.loops;\n                        this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n\n                        lastLoop = this.situation.loop - 1;\n                        this.situation.loop = this.situation.loops;\n                    }\n\n                    if (this.situation.reversing) {\n                        // Toggle reversed if an odd number of loops as occured since the last call of step\n                        this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);\n                    }\n                } else {\n                    // If there are no loop, the absolute position must not be above 1\n                    this.absPos = Math.min(this.absPos, 1);\n                    this.pos = this.absPos;\n                } // while the absolute position can be below 0, the position must not be below 0\n\n\n                if (this.pos < 0) this.pos = 0;\n                if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing\n\n                var eased = this.situation.ease(this.pos); // call once-callbacks\n\n                for (var i in this.situation.once) {\n                    if (i > this.lastPos && i <= eased) {\n                        this.situation.once[i].call(this.target(), this.pos, eased);\n                        delete this.situation.once[i];\n                    }\n                } // fire during callback with position, eased position and current situation as parameter\n\n\n                if (this.active) this.target().fire('during', {\n                    pos: this.pos,\n                    eased: eased,\n                    fx: this,\n                    situation: this.situation\n                }); // the user may call stop or finish in the during callback\n                // so make sure that we still have a valid situation\n\n                if (!this.situation) {\n                    return this;\n                } // apply the actual animation to every property\n\n\n                this.eachAt(); // do final code when situation is finished\n\n                if (this.pos == 1 && !this.situation.reversed || this.situation.reversed && this.pos == 0) {\n                    // stop animation callback\n                    this.stopAnimFrame(); // fire finished callback with current situation as parameter\n\n                    this.target().fire('finished', {\n                        fx: this,\n                        situation: this.situation\n                    });\n\n                    if (!this.situations.length) {\n                        this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback\n\n                        if (!this.situations.length) {\n                            this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...\n\n                            this.active = false;\n                        }\n                    } // start next animation\n\n\n                    if (this.active) this.dequeue();\n                    else this.clearCurrent();\n                } else if (!this.paused && this.active) {\n                    // we continue animating when we are not at the end\n                    this.startAnimFrame();\n                } // save last eased position for once callback triggering\n\n\n                this.lastPos = eased;\n                return this;\n            },\n            // calculates the step for every property and calls block with it\n            eachAt: function eachAt() {\n                var len,\n                    at,\n                    self = this,\n                    target = this.target(),\n                    s = this.situation; // apply animations which can be called trough a method\n\n                for (var i in s.animations) {\n                    at = [].concat(s.animations[i]).map(function(el) {\n                        return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n                    });\n                    target[i].apply(target, at);\n                } // apply animation which has to be applied with attr()\n\n\n                for (var i in s.attrs) {\n                    at = [i].concat(s.attrs[i]).map(function(el) {\n                        return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n                    });\n                    target.attr.apply(target, at);\n                } // apply animation which has to be applied with style()\n\n\n                for (var i in s.styles) {\n                    at = [i].concat(s.styles[i]).map(function(el) {\n                        return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n                    });\n                    target.style.apply(target, at);\n                } // animate initialTransformation which has to be chained\n\n\n                if (s.transforms.length) {\n                    // get initial initialTransformation\n                    at = s.initialTransformation;\n\n                    for (var i = 0, len = s.transforms.length; i < len; i++) {\n                        // get next transformation in chain\n                        var a = s.transforms[i]; // multiply matrix directly\n\n                        if (a instanceof SVG.Matrix) {\n                            if (a.relative) {\n                                at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));\n                            } else {\n                                at = at.morph(a).at(s.ease(this.pos));\n                            }\n\n                            continue;\n                        } // when transformation is absolute we have to reset the needed transformation first\n\n\n                        if (!a.relative) {\n                            a.undo(at.extract());\n                        } // and reapply it after\n\n\n                        at = at.multiply(a.at(s.ease(this.pos)));\n                    } // set new matrix on element\n\n\n                    target.matrix(at);\n                }\n\n                return this;\n            },\n            // adds an once-callback which is called at a specific position and never again\n            once: function once(pos, fn, isEased) {\n                var c = this.last();\n                if (!isEased) pos = c.ease(pos);\n                c.once[pos] = fn;\n                return this;\n            },\n            _callStart: function _callStart() {\n                setTimeout(function() {\n                    this.start();\n                }.bind(this), 0);\n                return this;\n            }\n        },\n        parent: SVG.Element,\n        // Add method to parent elements\n        construct: {\n            // Get fx module or create a new one, then animate with given duration and ease\n            animate: function animate(o, ease, delay) {\n                return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);\n            },\n            delay: function delay(_delay) {\n                return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay);\n            },\n            stop: function stop(jumpToEnd, clearQueue) {\n                if (this.fx) {\n                    this.fx.stop(jumpToEnd, clearQueue);\n                }\n\n                return this;\n            },\n            finish: function finish() {\n                if (this.fx) {\n                    this.fx.finish();\n                }\n\n                return this;\n            }\n        }\n    }); // MorphObj is used whenever no morphable object is given\n\n    SVG.MorphObj = SVG.invent({\n        create: function create(from, to) {\n            // prepare color for morphing\n            if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values\n\n            if (SVG.regex.delimiter.test(from)) {\n                // prepare path for morphing\n                if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to); // prepare value list for morphing\n                else return new SVG.Array(from).morph(to);\n            } // prepare number for morphing\n\n\n            if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing\n\n            this.value = from;\n            this.destination = to;\n        },\n        extend: {\n            at: function at(pos, real) {\n                return real < 1 ? this.value : this.destination;\n            },\n            valueOf: function valueOf() {\n                return this.value;\n            }\n        }\n    });\n    SVG.extend(SVG.FX, {\n        // Add animatable attributes\n        attr: function attr(a, v, relative) {\n            // apply attributes individually\n            if (typeof(a) === 'object') {\n                for (var key in a) {\n                    this.attr(key, a[key]);\n                }\n            } else {\n                this.add(a, v, 'attrs');\n            }\n\n            return this;\n        },\n        // Add animatable plot\n        plot: function plot(a, b, c, d) {\n            // Lines can be plotted with 4 arguments\n            if (arguments.length == 4) {\n                return this.plot([a, b, c, d]);\n            }\n\n            return this.add('plot', new(this.target().morphArray)(a));\n        }\n    });\n    SVG.Box = SVG.invent({\n        create: function create(x, y, width, height) {\n            if (typeof(x) === 'object' && !(x instanceof SVG.Element)) {\n                // chromes getBoundingClientRect has no x and y property\n                return SVG.Box.call(this, x.left != null ? x.left : x.x, x.top != null ? x.top : x.y, x.width, x.height);\n            } else if (arguments.length == 4) {\n                this.x = x;\n                this.y = y;\n                this.width = width;\n                this.height = height;\n            } // add center, right, bottom...\n\n\n            fullBox(this);\n        }\n    });\n    SVG.BBox = SVG.invent({\n        // Initialize\n        create: function create(element) {\n            SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given\n\n            if (element instanceof SVG.Element) {\n                var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\n\n                try {\n                    if (!document.documentElement.contains) {\n                        // This is IE - it does not support contains() for top-level SVGs\n                        var topParent = element.node;\n\n                        while (topParent.parentNode) {\n                            topParent = topParent.parentNode;\n                        }\n\n                        if (topParent != document) throw new Error('Element not in the dom');\n                    } else {} // the element is NOT in the dom, throw error\n                    // disabling the check below which fixes issue #76\n                    // if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\n                    // find native bbox\n\n\n                    box = element.node.getBBox();\n                } catch (e) {\n                    if (element instanceof SVG.Shape) {\n                        if (!SVG.parser.draw) {\n                            // fixes apexcharts/vue-apexcharts #14\n                            SVG.prepare();\n                        }\n\n                        var clone = element.clone(SVG.parser.draw.instance).show();\n                        box = clone.node.getBBox();\n                        clone.remove();\n                    } else {\n                        box = {\n                            x: element.node.clientLeft,\n                            y: element.node.clientTop,\n                            width: element.node.clientWidth,\n                            height: element.node.clientHeight\n                        };\n                    }\n                }\n\n                SVG.Box.call(this, box);\n            }\n        },\n        // Define ancestor\n        inherit: SVG.Box,\n        // Define Parent\n        parent: SVG.Element,\n        // Constructor\n        construct: {\n            // Get bounding box\n            bbox: function bbox() {\n                return new SVG.BBox(this);\n            }\n        }\n    });\n    SVG.BBox.prototype.constructor = SVG.BBox;\n    SVG.Matrix = SVG.invent({\n        // Initialize\n        create: function create(source) {\n            var base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n            source = source instanceof SVG.Element ? source.matrixify() : typeof source === 'string' ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) : arguments.length == 6 ? arrayToMatrix([].slice.call(arguments)) : Array.isArray(source) ? arrayToMatrix(source) : typeof(source) === 'object' ? source : base; // merge source\n\n            for (var i = abcdef.length - 1; i >= 0; --i) {\n                this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];\n            }\n        },\n        // Add methods\n        extend: {\n            // Extract individual transformations\n            extract: function extract() {\n                // find delta transform points\n                var px = deltaTransformPoint(this, 0, 1),\n                    py = deltaTransformPoint(this, 1, 0),\n                    skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n                return {\n                    // translation\n                    x: this.e,\n                    y: this.f,\n                    transformedX: (this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n                    transformedY: (this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n                    // rotation\n                    rotation: skewX,\n                    a: this.a,\n                    b: this.b,\n                    c: this.c,\n                    d: this.d,\n                    e: this.e,\n                    f: this.f,\n                    matrix: new SVG.Matrix(this)\n                };\n            },\n            // Clone matrix\n            clone: function clone() {\n                return new SVG.Matrix(this);\n            },\n            // Morph one matrix into another\n            morph: function morph(matrix) {\n                // store new destination\n                this.destination = new SVG.Matrix(matrix);\n                return this;\n            },\n            // Multiplies by given matrix\n            multiply: function multiply(matrix) {\n                return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));\n            },\n            // Inverses matrix\n            inverse: function inverse() {\n                return new SVG.Matrix(this.native().inverse());\n            },\n            // Translate matrix\n            translate: function translate(x, y) {\n                return new SVG.Matrix(this.native().translate(x || 0, y || 0));\n            },\n            // Convert to native SVGMatrix\n            native: function native() {\n                // create new matrix\n                var matrix = SVG.parser.native.createSVGMatrix(); // update with current values\n\n                for (var i = abcdef.length - 1; i >= 0; i--) {\n                    matrix[abcdef[i]] = this[abcdef[i]];\n                }\n\n                return matrix;\n            },\n            // Convert matrix to string\n            toString: function toString() {\n                // Construct the matrix directly, avoid values that are too small\n                return 'matrix(' + float32String(this.a) + ',' + float32String(this.b) + ',' + float32String(this.c) + ',' + float32String(this.d) + ',' + float32String(this.e) + ',' + float32String(this.f) + ')';\n            }\n        },\n        // Define parent\n        parent: SVG.Element,\n        // Add parent method\n        construct: {\n            // Get current matrix\n            ctm: function ctm() {\n                return new SVG.Matrix(this.node.getCTM());\n            },\n            // Get current screen matrix\n            screenCTM: function screenCTM() {\n                /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n                This is needed because FF does not return the transformation matrix\n                for the inner coordinate system when getScreenCTM() is called on nested svgs.\n                However all other Browsers do that */\n                if (this instanceof SVG.Nested) {\n                    var rect = this.rect(1, 1);\n                    var m = rect.node.getScreenCTM();\n                    rect.remove();\n                    return new SVG.Matrix(m);\n                }\n\n                return new SVG.Matrix(this.node.getScreenCTM());\n            }\n        }\n    });\n    SVG.Point = SVG.invent({\n        // Initialize\n        create: function create(x, y) {\n            var source,\n                base = {\n                    x: 0,\n                    y: 0\n                }; // ensure source as object\n\n            source = Array.isArray(x) ? {\n                x: x[0],\n                y: x[1]\n            } : typeof(x) === 'object' ? {\n                x: x.x,\n                y: x.y\n            } : x != null ? {\n                x: x,\n                y: y != null ? y : x\n            } : base; // If y has no value, then x is used has its value\n            // merge source\n\n            this.x = source.x;\n            this.y = source.y;\n        },\n        // Add methods\n        extend: {\n            // Clone point\n            clone: function clone() {\n                return new SVG.Point(this);\n            },\n            // Morph one point into another\n            morph: function morph(x, y) {\n                // store new destination\n                this.destination = new SVG.Point(x, y);\n                return this;\n            }\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Get point\n        point: function point(x, y) {\n            return new SVG.Point(x, y).transform(this.screenCTM().inverse());\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Set svg element attribute\n        attr: function attr(a, v, n) {\n            // act as full getter\n            if (a == null) {\n                // get an object of attributes\n                a = {};\n                v = this.node.attributes;\n\n                for (var n = v.length - 1; n >= 0; n--) {\n                    a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue;\n                }\n\n                return a;\n            } else if (typeof(a) === 'object') {\n                // apply every attribute individually if an object is passed\n                for (var v_ in a) {\n                    this.attr(v_, a[v_]);\n                }\n            } else if (v === null) {\n                // remove value\n                this.node.removeAttribute(a);\n            } else if (v == null) {\n                // act as a getter if the first and only argument is not an object\n                v = this.node.getAttribute(a);\n                return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;\n            } else {\n                // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n                if (a == 'stroke-width') {\n                    this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);\n                } else if (a == 'stroke') {\n                    this._stroke = v;\n                } // convert image fill and stroke to patterns\n\n\n                if (a == 'fill' || a == 'stroke') {\n                    if (SVG.regex.isImage.test(v)) {\n                        v = this.doc().defs().image(v, 0, 0);\n                    }\n\n                    if (v instanceof SVG.Image) {\n                        v = this.doc().defs().pattern(0, 0, function() {\n                            this.add(v);\n                        });\n                    }\n                } // ensure correct numeric values (also accepts NaN and Infinity)\n\n\n                if (typeof v === 'number') {\n                    v = new SVG.Number(v);\n                } // ensure full hex color\n                else if (SVG.Color.isColor(v)) {\n                    v = new SVG.Color(v);\n                } // parse array values\n                else if (Array.isArray(v)) {\n                    v = new SVG.Array(v);\n                } // if the passed attribute is leading...\n\n\n                if (a == 'leading') {\n                    // ... call the leading method instead\n                    if (this.leading) {\n                        this.leading(v);\n                    }\n                } else {\n                    // set given attribute on node\n                    typeof n === 'string' ? this.node.setAttributeNS(n, a, v.toString()) : this.node.setAttribute(a, v.toString());\n                } // rebuild if required\n\n\n                if (this.rebuild && (a == 'font-size' || a == 'x')) {\n                    this.rebuild(a, v);\n                }\n            }\n\n            return this;\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Add transformations\n        transform: function transform(o, relative) {\n            // get target in case of the fx module, otherwise reference this\n            var target = this,\n                matrix;\n            // act as a getter\n\n            if (typeof(o) !== 'object') {\n                // get current matrix\n                matrix = new SVG.Matrix(target).extract();\n                return typeof o === 'string' ? matrix[o] : matrix;\n            } // get current matrix\n\n\n            matrix = new SVG.Matrix(target); // ensure relative flag\n\n            relative = !!relative || !!o.relative; // act on matrix\n\n            if (o.a != null) {\n                matrix = relative // relative\n                    ?\n                    matrix.multiply(new SVG.Matrix(o)) // absolute\n                    :\n                    new SVG.Matrix(o);\n            }\n\n            return this.attr('transform', matrix);\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Reset all transformations\n        untransform: function untransform() {\n            return this.attr('transform', null);\n        },\n        // merge the whole transformation chain into one matrix and returns it\n        matrixify: function matrixify() {\n            var matrix = (this.attr('transform') || ''). // split transformations\n            split(SVG.regex.transforms).slice(0, -1).map(function(str) {\n                    // generate key => value pairs\n                    var kv = str.trim().split('(');\n                    return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str) {\n                        return parseFloat(str);\n                    })];\n                }) // merge every transformation into one matrix\n                .reduce(function(matrix, transform) {\n                    if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));\n                    return matrix[transform[0]].apply(matrix, transform[1]);\n                }, new SVG.Matrix());\n            return matrix;\n        },\n        // add an element to another parent without changing the visual representation on the screen\n        toParent: function toParent(parent) {\n            if (this == parent) return this;\n            var ctm = this.screenCTM();\n            var pCtm = parent.screenCTM().inverse();\n            this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n            return this;\n        },\n        // same as above with parent equals root-svg\n        toDoc: function toDoc() {\n            return this.toParent(this.doc());\n        }\n    });\n    SVG.Transformation = SVG.invent({\n        create: function create(source, inversed) {\n            if (arguments.length > 1 && typeof inversed !== 'boolean') {\n                return this.constructor.call(this, [].slice.call(arguments));\n            }\n\n            if (Array.isArray(source)) {\n                for (var i = 0, len = this.arguments.length; i < len; ++i) {\n                    this[this.arguments[i]] = source[i];\n                }\n            } else if (typeof(source) === 'object') {\n                for (var i = 0, len = this.arguments.length; i < len; ++i) {\n                    this[this.arguments[i]] = source[this.arguments[i]];\n                }\n            }\n\n            this.inversed = false;\n\n            if (inversed === true) {\n                this.inversed = true;\n            }\n        }\n    });\n    SVG.Translate = SVG.invent({\n        parent: SVG.Matrix,\n        inherit: SVG.Transformation,\n        create: function create(source, inversed) {\n            this.constructor.apply(this, [].slice.call(arguments));\n        },\n        extend: {\n            arguments: ['transformedX', 'transformedY'],\n            method: 'translate'\n        }\n    });\n    SVG.extend(SVG.Element, {\n        // Dynamic style generator\n        style: function style(s, v) {\n            if (arguments.length == 0) {\n                // get full style\n                return this.node.style.cssText || '';\n            } else if (arguments.length < 2) {\n                // apply every style individually if an object is passed\n                if (typeof(s) === 'object') {\n                    for (var v_ in s) {\n                        this.style(v_, s[v_]);\n                    }\n                } else if (SVG.regex.isCss.test(s)) {\n                    // parse css string\n                    s = s.split(/\\s*;\\s*/) // filter out suffix ; and stuff like ;;\n                        .filter(function(e) {\n                            return !!e;\n                        }).map(function(e) {\n                            return e.split(/\\s*:\\s*/);\n                        }); // apply every definition individually\n\n                    while (v = s.pop()) {\n                        this.style(v[0], v[1]);\n                    }\n                } else {\n                    // act as a getter if the first and only argument is not an object\n                    return this.node.style[camelCase(s)];\n                }\n            } else {\n                this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;\n            }\n\n            return this;\n        }\n    });\n    SVG.Parent = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            this.constructor.call(this, element);\n        },\n        // Inherit from\n        inherit: SVG.Element,\n        // Add class methods\n        extend: {\n            // Returns all child elements\n            children: function children() {\n                return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n                    return SVG.adopt(node);\n                });\n            },\n            // Add given element at a position\n            add: function add(element, i) {\n                if (i == null) {\n                    this.node.appendChild(element.node);\n                } else if (element.node != this.node.childNodes[i]) {\n                    this.node.insertBefore(element.node, this.node.childNodes[i]);\n                }\n\n                return this;\n            },\n            // Basically does the same as `add()` but returns the added element instead\n            put: function put(element, i) {\n                this.add(element, i);\n                return element;\n            },\n            // Checks if the given element is a child\n            has: function has(element) {\n                return this.index(element) >= 0;\n            },\n            // Gets index of given element\n            index: function index(element) {\n                return [].slice.call(this.node.childNodes).indexOf(element.node);\n            },\n            // Get a element at the given index\n            get: function get(i) {\n                return SVG.adopt(this.node.childNodes[i]);\n            },\n            // Get first child\n            first: function first() {\n                return this.get(0);\n            },\n            // Get the last child\n            last: function last() {\n                return this.get(this.node.childNodes.length - 1);\n            },\n            // Iterates over all children and invokes a given block\n            each: function each(block, deep) {\n                var il,\n                    children = this.children();\n\n                for (var i = 0, il = children.length; i < il; i++) {\n                    if (children[i] instanceof SVG.Element) {\n                        block.apply(children[i], [i, children]);\n                    }\n\n                    if (deep && children[i] instanceof SVG.Container) {\n                        children[i].each(block, deep);\n                    }\n                }\n\n                return this;\n            },\n            // Remove a given child\n            removeElement: function removeElement(element) {\n                this.node.removeChild(element.node);\n                return this;\n            },\n            // Remove all elements in this container\n            clear: function clear() {\n                // remove children\n                while (this.node.hasChildNodes()) {\n                    this.node.removeChild(this.node.lastChild);\n                } // remove defs reference\n\n\n                delete this._defs;\n                return this;\n            },\n            // Get defs\n            defs: function defs() {\n                return this.doc().defs();\n            }\n        }\n    });\n    SVG.extend(SVG.Parent, {\n        ungroup: function ungroup(parent, depth) {\n            if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;\n            parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));\n            depth = depth || Infinity;\n            this.each(function() {\n                if (this instanceof SVG.Defs) return this;\n                if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);\n                return this.toParent(parent);\n            });\n            this.node.firstChild || this.remove();\n            return this;\n        },\n        flatten: function flatten(parent, depth) {\n            return this.ungroup(parent, depth);\n        }\n    });\n    SVG.Container = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            this.constructor.call(this, element);\n        },\n        // Inherit from\n        inherit: SVG.Parent\n    });\n    SVG.ViewBox = SVG.invent({\n            // Define parent\n            parent: SVG.Container,\n            // Add parent method\n            construct: {}\n        }) // Add events to elements\n    ;\n    ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', // , 'mouseenter' -> not supported by IE\n        // , 'mouseleave' -> not supported by IE\n        'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'\n    ].forEach(function(event) {\n        // add event to SVG.Element\n        SVG.Element.prototype[event] = function(f) {\n            // bind event to element rather than element node\n            SVG.on(this.node, event, f);\n            return this;\n        };\n    }); // Initialize listeners stack\n\n    SVG.listeners = [];\n    SVG.handlerMap = [];\n    SVG.listenerId = 0; // Add event binder in the SVG namespace\n\n    SVG.on = function(node, event, listener, binding, options) {\n        // create listener, get object-index\n        var l = listener.bind(binding || node.instance || node),\n            index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1,\n            ev = event.split('.')[0],\n            ns = event.split('.')[1] || '*'; // ensure valid object\n\n        SVG.listeners[index] = SVG.listeners[index] || {};\n        SVG.listeners[index][ev] = SVG.listeners[index][ev] || {};\n        SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {};\n\n        if (!listener._svgjsListenerId) {\n            listener._svgjsListenerId = ++SVG.listenerId;\n        } // reference listener\n\n\n        SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l; // add listener\n\n        node.addEventListener(ev, l, options || {\n            passive: true\n        });\n    }; // Add event unbinder in the SVG namespace\n\n\n    SVG.off = function(node, event, listener) {\n        var index = SVG.handlerMap.indexOf(node),\n            ev = event && event.split('.')[0],\n            ns = event && event.split('.')[1],\n            namespace = '';\n        if (index == -1) return;\n\n        if (listener) {\n            if (typeof listener === 'function') listener = listener._svgjsListenerId;\n            if (!listener) return; // remove listener reference\n\n            if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n                // remove listener\n                node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false);\n                delete SVG.listeners[index][ev][ns || '*'][listener];\n            }\n        } else if (ns && ev) {\n            // remove all listeners for a namespaced event\n            if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n                for (var listener_ in SVG.listeners[index][ev][ns]) {\n                    SVG.off(node, [ev, ns].join('.'), listener_);\n                }\n\n                delete SVG.listeners[index][ev][ns];\n            }\n        } else if (ns) {\n            // remove all listeners for a specific namespace\n            for (var event_ in SVG.listeners[index]) {\n                for (var namespace in SVG.listeners[index][event_]) {\n                    if (ns === namespace) {\n                        SVG.off(node, [event_, ns].join('.'));\n                    }\n                }\n            }\n        } else if (ev) {\n            // remove all listeners for the event\n            if (SVG.listeners[index][ev]) {\n                for (var namespace in SVG.listeners[index][ev]) {\n                    SVG.off(node, [ev, namespace].join('.'));\n                }\n\n                delete SVG.listeners[index][ev];\n            }\n        } else {\n            // remove all listeners on a given node\n            for (var event_ in SVG.listeners[index]) {\n                SVG.off(node, event_);\n            }\n\n            delete SVG.listeners[index];\n            delete SVG.handlerMap[index];\n        }\n    }; //\n\n\n    SVG.extend(SVG.Element, {\n        // Bind given event to listener\n        on: function on(event, listener, binding, options) {\n            SVG.on(this.node, event, listener, binding, options);\n            return this;\n        },\n        // Unbind event from listener\n        off: function off(event, listener) {\n            SVG.off(this.node, event, listener);\n            return this;\n        },\n        // Fire given event\n        fire: function fire(event, data) {\n            // Dispatch event\n            if (event instanceof window.Event) {\n                this.node.dispatchEvent(event);\n            } else {\n                this.node.dispatchEvent(event = new SVG.CustomEvent(event, {\n                    detail: data,\n                    cancelable: true\n                }));\n            }\n\n            this._event = event;\n            return this;\n        },\n        event: function event() {\n            return this._event;\n        }\n    });\n    SVG.Defs = SVG.invent({\n        // Initialize node\n        create: 'defs',\n        // Inherit from\n        inherit: SVG.Container\n    });\n    SVG.G = SVG.invent({\n        // Initialize node\n        create: 'g',\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Move over x-axis\n            x: function x(_x2) {\n                return _x2 == null ? this.transform('x') : this.transform({\n                    x: _x2 - this.x()\n                }, true);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a group element\n            group: function group() {\n                return this.put(new SVG.G());\n            }\n        }\n    });\n    SVG.Doc = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            if (element) {\n                // ensure the presence of a dom element\n                element = typeof element === 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.\n                // This allows svg.js to work with svg documents as well.\n\n                if (element.nodeName == 'svg') {\n                    this.constructor.call(this, element);\n                } else {\n                    this.constructor.call(this, SVG.create('svg'));\n                    element.appendChild(this.node);\n                    this.size('100%', '100%');\n                } // set svg element attributes and ensure defs node\n\n\n                this.namespace().defs();\n            }\n        },\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Add namespaces\n            namespace: function namespace() {\n                return this.attr({\n                    xmlns: SVG.ns,\n                    version: '1.1'\n                }).attr('xmlns:xlink', SVG.xlink, SVG.xmlns).attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);\n            },\n            // Creates and returns defs element\n            defs: function defs() {\n                if (!this._defs) {\n                    var defs; // Find or create a defs element in this instance\n\n                    if (defs = this.node.getElementsByTagName('defs')[0]) {\n                        this._defs = SVG.adopt(defs);\n                    } else {\n                        this._defs = new SVG.Defs();\n                    } // Make sure the defs node is at the end of the stack\n\n\n                    this.node.appendChild(this._defs.node);\n                }\n\n                return this._defs;\n            },\n            // custom parent method\n            parent: function parent() {\n                if (!this.node.parentNode || this.node.parentNode.nodeName == '#document') return null;\n                return this.node.parentNode;\n            },\n            // Removes the doc from the DOM\n            remove: function remove() {\n                if (this.parent()) {\n                    this.parent().removeChild(this.node);\n                }\n\n                return this;\n            },\n            clear: function clear() {\n                // remove children\n                while (this.node.hasChildNodes()) {\n                    this.node.removeChild(this.node.lastChild);\n                } // remove defs reference\n\n\n                delete this._defs; // add back parser\n\n                if (SVG.parser.draw && !SVG.parser.draw.parentNode) {\n                    this.node.appendChild(SVG.parser.draw);\n                }\n\n                return this;\n            },\n            clone: function clone(parent) {\n                // write dom data to the dom so the clone can pickup the data\n                this.writeDataToDom(); // get reference to node\n\n                var node = this.node; // clone element and assign new id\n\n                var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n                if (parent) {\n                    (parent.node || parent).appendChild(clone.node);\n                } else {\n                    node.parentNode.insertBefore(clone.node, node.nextSibling);\n                }\n\n                return clone;\n            }\n        }\n    }); // ### This module adds backward / forward functionality to elements.\n    //\n\n    SVG.extend(SVG.Element, { // Get all siblings, including myself\n    });\n    SVG.Gradient = SVG.invent({\n        // Initialize node\n        create: function create(type) {\n            this.constructor.call(this, SVG.create(type + 'Gradient')); // store type\n\n            this.type = type;\n        },\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Add a color stop\n            at: function at(offset, color, opacity) {\n                return this.put(new SVG.Stop()).update(offset, color, opacity);\n            },\n            // Update gradient\n            update: function update(block) {\n                // remove all stops\n                this.clear(); // invoke passed block\n\n                if (typeof block === 'function') {\n                    block.call(this, this);\n                }\n\n                return this;\n            },\n            // Return the fill id\n            fill: function fill() {\n                return 'url(#' + this.id() + ')';\n            },\n            // Alias string convertion to fill\n            toString: function toString() {\n                return this.fill();\n            },\n            // custom attr to handle transform\n            attr: function attr(a, b, c) {\n                if (a == 'transform') a = 'gradientTransform';\n                return SVG.Container.prototype.attr.call(this, a, b, c);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create gradient element in defs\n            gradient: function gradient(type, block) {\n                return this.defs().gradient(type, block);\n            }\n        }\n    }); // Add animatable methods to both gradient and fx module\n\n    SVG.extend(SVG.Gradient, SVG.FX, {\n        // From position\n        from: function from(x, y) {\n            return (this._target || this).type == 'radial' ? this.attr({\n                fx: new SVG.Number(x),\n                fy: new SVG.Number(y)\n            }) : this.attr({\n                x1: new SVG.Number(x),\n                y1: new SVG.Number(y)\n            });\n        },\n        // To position\n        to: function to(x, y) {\n            return (this._target || this).type == 'radial' ? this.attr({\n                cx: new SVG.Number(x),\n                cy: new SVG.Number(y)\n            }) : this.attr({\n                x2: new SVG.Number(x),\n                y2: new SVG.Number(y)\n            });\n        }\n    }); // Base gradient generation\n\n    SVG.extend(SVG.Defs, {\n        // define gradient\n        gradient: function gradient(type, block) {\n            return this.put(new SVG.Gradient(type)).update(block);\n        }\n    });\n    SVG.Stop = SVG.invent({\n        // Initialize node\n        create: 'stop',\n        // Inherit from\n        inherit: SVG.Element,\n        // Add class methods\n        extend: {\n            // add color stops\n            update: function update(o) {\n                if (typeof o === 'number' || o instanceof SVG.Number) {\n                    o = {\n                        offset: arguments[0],\n                        color: arguments[1],\n                        opacity: arguments[2]\n                    };\n                } // set attributes\n\n\n                if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n                if (o.color != null) this.attr('stop-color', o.color);\n                if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));\n                return this;\n            }\n        }\n    });\n    SVG.Pattern = SVG.invent({\n        // Initialize node\n        create: 'pattern',\n        // Inherit from\n        inherit: SVG.Container,\n        // Add class methods\n        extend: {\n            // Return the fill id\n            fill: function fill() {\n                return 'url(#' + this.id() + ')';\n            },\n            // Update pattern by rebuilding\n            update: function update(block) {\n                // remove content\n                this.clear(); // invoke passed block\n\n                if (typeof block === 'function') {\n                    block.call(this, this);\n                }\n\n                return this;\n            },\n            // Alias string convertion to fill\n            toString: function toString() {\n                return this.fill();\n            },\n            // custom attr to handle transform\n            attr: function attr(a, b, c) {\n                if (a == 'transform') a = 'patternTransform';\n                return SVG.Container.prototype.attr.call(this, a, b, c);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create pattern element in defs\n            pattern: function pattern(width, height, block) {\n                return this.defs().pattern(width, height, block);\n            }\n        }\n    });\n    SVG.extend(SVG.Defs, {\n        // Define gradient\n        pattern: function pattern(width, height, block) {\n            return this.put(new SVG.Pattern()).update(block).attr({\n                x: 0,\n                y: 0,\n                width: width,\n                height: height,\n                patternUnits: 'userSpaceOnUse'\n            });\n        }\n    });\n    SVG.Shape = SVG.invent({\n        // Initialize node\n        create: function create(element) {\n            this.constructor.call(this, element);\n        },\n        // Inherit from\n        inherit: SVG.Element\n    });\n    SVG.Symbol = SVG.invent({\n        // Initialize node\n        create: 'symbol',\n        // Inherit from\n        inherit: SVG.Container,\n        construct: {\n            // create symbol\n            symbol: function symbol() {\n                return this.put(new SVG.Symbol());\n            }\n        }\n    });\n    SVG.Use = SVG.invent({\n        // Initialize node\n        create: 'use',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Use element as a reference\n            element: function element(_element, file) {\n                // Set lined element\n                return this.attr('href', (file || '') + '#' + _element, SVG.xlink);\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a use element\n            use: function use(element, file) {\n                return this.put(new SVG.Use()).element(element, file);\n            }\n        }\n    });\n    SVG.Rect = SVG.invent({\n        // Initialize node\n        create: 'rect',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create a rect element\n            rect: function rect(width, height) {\n                return this.put(new SVG.Rect()).size(width, height);\n            }\n        }\n    });\n    SVG.Circle = SVG.invent({\n        // Initialize node\n        create: 'circle',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create circle element, based on ellipse\n            circle: function circle(size) {\n                return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);\n            }\n        }\n    });\n    SVG.extend(SVG.Circle, SVG.FX, {\n        // Radius x value\n        rx: function rx(_rx) {\n            return this.attr('r', _rx);\n        },\n        // Alias radius x value\n        ry: function ry(_ry) {\n            return this.rx(_ry);\n        }\n    });\n    SVG.Ellipse = SVG.invent({\n        // Initialize node\n        create: 'ellipse',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create an ellipse\n            ellipse: function ellipse(width, height) {\n                return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);\n            }\n        }\n    });\n    SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n        // Radius x value\n        rx: function rx(_rx2) {\n            return this.attr('rx', _rx2);\n        },\n        // Radius y value\n        ry: function ry(_ry2) {\n            return this.attr('ry', _ry2);\n        }\n    }); // Add common method\n\n    SVG.extend(SVG.Circle, SVG.Ellipse, {\n        // Move over x-axis\n        x: function x(_x3) {\n            return _x3 == null ? this.cx() - this.rx() : this.cx(_x3 + this.rx());\n        },\n        // Move over y-axis\n        y: function y(_y2) {\n            return _y2 == null ? this.cy() - this.ry() : this.cy(_y2 + this.ry());\n        },\n        // Move by center over x-axis\n        cx: function cx(x) {\n            return x == null ? this.attr('cx') : this.attr('cx', x);\n        },\n        // Move by center over y-axis\n        cy: function cy(y) {\n            return y == null ? this.attr('cy') : this.attr('cy', y);\n        },\n        // Set width of element\n        width: function width(_width2) {\n            return _width2 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width2).divide(2));\n        },\n        // Set height of element\n        height: function height(_height2) {\n            return _height2 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height2).divide(2));\n        },\n        // Custom size function\n        size: function size(width, height) {\n            var p = proportionalSize(this, width, height);\n            return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));\n        }\n    });\n    SVG.Line = SVG.invent({\n        // Initialize node\n        create: 'line',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Get array\n            array: function array() {\n                return new SVG.PointArray([\n                    [this.attr('x1'), this.attr('y1')],\n                    [this.attr('x2'), this.attr('y2')]\n                ]);\n            },\n            // Overwrite native plot() method\n            plot: function plot(x1, y1, x2, y2) {\n                if (x1 == null) {\n                    return this.array();\n                } else if (typeof y1 !== 'undefined') {\n                    x1 = {\n                        x1: x1,\n                        y1: y1,\n                        x2: x2,\n                        y2: y2\n                    };\n                } else {\n                    x1 = new SVG.PointArray(x1).toLine();\n                }\n\n                return this.attr(x1);\n            },\n            // Move by left top corner\n            move: function move(x, y) {\n                return this.attr(this.array().move(x, y).toLine());\n            },\n            // Set element size to given width and height\n            size: function size(width, height) {\n                var p = proportionalSize(this, width, height);\n                return this.attr(this.array().size(p.width, p.height).toLine());\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a line element\n            line: function line(x1, y1, x2, y2) {\n                // make sure plot is called as a setter\n                // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\n                return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()), x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]);\n            }\n        }\n    });\n    SVG.Polyline = SVG.invent({\n        // Initialize node\n        create: 'polyline',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create a wrapped polyline element\n            polyline: function polyline(p) {\n                // make sure plot is called as a setter\n                return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());\n            }\n        }\n    });\n    SVG.Polygon = SVG.invent({\n        // Initialize node\n        create: 'polygon',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add parent method\n        construct: {\n            // Create a wrapped polygon element\n            polygon: function polygon(p) {\n                // make sure plot is called as a setter\n                return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());\n            }\n        }\n    }); // Add polygon-specific functions\n\n    SVG.extend(SVG.Polyline, SVG.Polygon, {\n        // Get array\n        array: function array() {\n            return this._array || (this._array = new SVG.PointArray(this.attr('points')));\n        },\n        // Plot new path\n        plot: function plot(p) {\n            return p == null ? this.array() : this.clear().attr('points', typeof p === 'string' ? p : this._array = new SVG.PointArray(p));\n        },\n        // Clear array cache\n        clear: function clear() {\n            delete this._array;\n            return this;\n        },\n        // Move by left top corner\n        move: function move(x, y) {\n            return this.attr('points', this.array().move(x, y));\n        },\n        // Set element size to given width and height\n        size: function size(width, height) {\n            var p = proportionalSize(this, width, height);\n            return this.attr('points', this.array().size(p.width, p.height));\n        }\n    }); // unify all point to point elements\n\n    SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n        // Define morphable array\n        morphArray: SVG.PointArray,\n        // Move by left top corner over x-axis\n        x: function x(_x4) {\n            return _x4 == null ? this.bbox().x : this.move(_x4, this.bbox().y);\n        },\n        // Move by left top corner over y-axis\n        y: function y(_y3) {\n            return _y3 == null ? this.bbox().y : this.move(this.bbox().x, _y3);\n        },\n        // Set width of element\n        width: function width(_width3) {\n            var b = this.bbox();\n            return _width3 == null ? b.width : this.size(_width3, b.height);\n        },\n        // Set height of element\n        height: function height(_height3) {\n            var b = this.bbox();\n            return _height3 == null ? b.height : this.size(b.width, _height3);\n        }\n    });\n    SVG.Path = SVG.invent({\n        // Initialize node\n        create: 'path',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Define morphable array\n            morphArray: SVG.PathArray,\n            // Get array\n            array: function array() {\n                return this._array || (this._array = new SVG.PathArray(this.attr('d')));\n            },\n            // Plot new path\n            plot: function plot(d) {\n                return d == null ? this.array() : this.clear().attr('d', typeof d === 'string' ? d : this._array = new SVG.PathArray(d));\n            },\n            // Clear array cache\n            clear: function clear() {\n                delete this._array;\n                return this;\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a wrapped path element\n            path: function path(d) {\n                // make sure plot is called as a setter\n                return this.put(new SVG.Path()).plot(d || new SVG.PathArray());\n            }\n        }\n    });\n    SVG.Image = SVG.invent({\n        // Initialize node\n        create: 'image',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // (re)load image\n            load: function load(url) {\n                if (!url) return this;\n                var self = this,\n                    img = new window.Image(); // preload image\n\n                SVG.on(img, 'load', function() {\n                    SVG.off(img);\n                    var p = self.parent(SVG.Pattern);\n                    if (p === null) return; // ensure image size\n\n                    if (self.width() == 0 && self.height() == 0) {\n                        self.size(img.width, img.height);\n                    } // ensure pattern size if not set\n\n\n                    if (p && p.width() == 0 && p.height() == 0) {\n                        p.size(self.width(), self.height());\n                    } // callback\n\n\n                    if (typeof self._loaded === 'function') {\n                        self._loaded.call(self, {\n                            width: img.width,\n                            height: img.height,\n                            ratio: img.width / img.height,\n                            url: url\n                        });\n                    }\n                });\n                SVG.on(img, 'error', function(e) {\n                    SVG.off(img);\n\n                    if (typeof self._error === 'function') {\n                        self._error.call(self, e);\n                    }\n                });\n                return this.attr('href', img.src = this.src = url, SVG.xlink);\n            },\n            // Add loaded callback\n            loaded: function loaded(_loaded) {\n                this._loaded = _loaded;\n                return this;\n            },\n            error: function error(_error) {\n                this._error = _error;\n                return this;\n            }\n        },\n        // Add parent method\n        construct: {\n            // create image element, load image and set its size\n            image: function image(source, width, height) {\n                return this.put(new SVG.Image()).load(source).size(width || 0, height || width || 0);\n            }\n        }\n    });\n    SVG.Text = SVG.invent({\n        // Initialize node\n        create: function create() {\n            this.constructor.call(this, SVG.create('text'));\n            this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding\n\n            this._rebuild = true; // enable automatic updating of dy values\n\n            this._build = false; // disable build mode for adding multiple lines\n            // set default font\n\n            this.attr('font-family', SVG.defaults.attrs['font-family']);\n        },\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Move over x-axis\n            x: function x(_x5) {\n                // act as getter\n                if (_x5 == null) {\n                    return this.attr('x');\n                }\n\n                return this.attr('x', _x5);\n            },\n            // Set the text content\n            text: function text(_text) {\n                // act as getter\n                if (typeof _text === 'undefined') {\n                    var _text = '';\n                    var children = this.node.childNodes;\n\n                    for (var i = 0, len = children.length; i < len; ++i) {\n                        // add newline if its not the first child and newLined is set to true\n                        if (i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true) {\n                            _text += '\\n';\n                        } // add content of this node\n\n\n                        _text += children[i].textContent;\n                    }\n\n                    return _text;\n                } // remove existing content\n\n\n                this.clear().build(true);\n\n                if (typeof _text === 'function') {\n                    // call block\n                    _text.call(this, this);\n                } else {\n                    // store text and make sure text is not blank\n                    _text = _text.split('\\n'); // build new lines\n\n                    for (var i = 0, il = _text.length; i < il; i++) {\n                        this.tspan(_text[i]).newLine();\n                    }\n                } // disable build mode and rebuild lines\n\n\n                return this.build(false).rebuild();\n            },\n            // Set font size\n            size: function size(_size) {\n                return this.attr('font-size', _size).rebuild();\n            },\n            // Set / get leading\n            leading: function leading(value) {\n                // act as getter\n                if (value == null) {\n                    return this.dom.leading;\n                } // act as setter\n\n\n                this.dom.leading = new SVG.Number(value);\n                return this.rebuild();\n            },\n            // Get all the first level lines\n            lines: function lines() {\n                var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances\n\n                var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el) {\n                    return SVG.adopt(el);\n                }); // return an instance of SVG.set\n\n                return new SVG.Set(lines);\n            },\n            // Rebuild appearance type\n            rebuild: function rebuild(_rebuild) {\n                // store new rebuild flag if given\n                if (typeof _rebuild === 'boolean') {\n                    this._rebuild = _rebuild;\n                } // define position of all lines\n\n\n                if (this._rebuild) {\n                    var self = this,\n                        blankLineOffset = 0,\n                        dy = this.dom.leading * new SVG.Number(this.attr('font-size'));\n                    this.lines().each(function() {\n                        if (this.dom.newLined) {\n                            if (!self.textPath()) {\n                                this.attr('x', self.attr('x'));\n                            }\n\n                            if (this.text() == '\\n') {\n                                blankLineOffset += dy;\n                            } else {\n                                this.attr('dy', dy + blankLineOffset);\n                                blankLineOffset = 0;\n                            }\n                        }\n                    });\n                    this.fire('rebuild');\n                }\n\n                return this;\n            },\n            // Enable / disable build mode\n            build: function build(_build) {\n                this._build = !!_build;\n                return this;\n            },\n            // overwrite method from parent to set data properly\n            setData: function setData(o) {\n                this.dom = o;\n                this.dom.leading = new SVG.Number(o.leading || 1.3);\n                return this;\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create text element\n            text: function text(_text2) {\n                return this.put(new SVG.Text()).text(_text2);\n            },\n            // Create plain text element\n            plain: function plain(text) {\n                return this.put(new SVG.Text()).plain(text);\n            }\n        }\n    });\n    SVG.Tspan = SVG.invent({\n        // Initialize node\n        create: 'tspan',\n        // Inherit from\n        inherit: SVG.Shape,\n        // Add class methods\n        extend: {\n            // Set text content\n            text: function text(_text3) {\n                if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n                typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);\n                return this;\n            },\n            // Shortcut dx\n            dx: function dx(_dx) {\n                return this.attr('dx', _dx);\n            },\n            // Shortcut dy\n            dy: function dy(_dy) {\n                return this.attr('dy', _dy);\n            },\n            // Create new line\n            newLine: function newLine() {\n                // fetch text parent\n                var t = this.parent(SVG.Text); // mark new line\n\n                this.dom.newLined = true; // apply new hy¡n\n\n                return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());\n            }\n        }\n    });\n    SVG.extend(SVG.Text, SVG.Tspan, {\n        // Create plain text node\n        plain: function plain(text) {\n            // clear if build mode is disabled\n            if (this._build === false) {\n                this.clear();\n            } // create text node\n\n\n            this.node.appendChild(document.createTextNode(text));\n            return this;\n        },\n        // Create a tspan\n        tspan: function tspan(text) {\n            var node = (this.textPath && this.textPath() || this).node,\n                tspan = new SVG.Tspan(); // clear if build mode is disabled\n\n            if (this._build === false) {\n                this.clear();\n            } // add new tspan\n\n\n            node.appendChild(tspan.node);\n            return tspan.text(text);\n        },\n        // Clear all lines\n        clear: function clear() {\n            var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes\n\n            while (node.hasChildNodes()) {\n                node.removeChild(node.lastChild);\n            }\n\n            return this;\n        },\n        // Get length of text element\n        length: function length() {\n            return this.node.getComputedTextLength();\n        }\n    });\n    SVG.TextPath = SVG.invent({\n        // Initialize node\n        create: 'textPath',\n        // Inherit from\n        inherit: SVG.Parent,\n        // Define parent class\n        parent: SVG.Text,\n        // Add parent method\n        construct: {\n            morphArray: SVG.PathArray,\n            // return the array of the path track element\n            array: function array() {\n                var track = this.track();\n                return track ? track.array() : null;\n            },\n            // Plot path if any\n            plot: function plot(d) {\n                var track = this.track(),\n                    pathArray = null;\n\n                if (track) {\n                    pathArray = track.plot(d);\n                }\n\n                return d == null ? pathArray : this;\n            },\n            // Get the path track element\n            track: function track() {\n                var path = this.textPath();\n\n                if (path) {\n                    return path.reference('href');\n                }\n            },\n            // Get the textPath child\n            textPath: function textPath() {\n                if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') {\n                    return SVG.adopt(this.node.firstChild);\n                }\n            }\n        }\n    });\n    SVG.Nested = SVG.invent({\n        // Initialize node\n        create: function create() {\n            this.constructor.call(this, SVG.create('svg'));\n            this.style('overflow', 'visible');\n        },\n        // Inherit from\n        inherit: SVG.Container,\n        // Add parent method\n        construct: {\n            // Create nested svg document\n            nested: function nested() {\n                return this.put(new SVG.Nested());\n            }\n        }\n    }); // Define list of available attributes for stroke and fill\n\n    var sugar = {\n            stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n            fill: ['color', 'opacity', 'rule'],\n            prefix: function prefix(t, a) {\n                return a == 'color' ? t : t + '-' + a;\n            }\n        } // Add sugar for fill and stroke\n    ;\n    ['fill', 'stroke'].forEach(function(m) {\n        var extension = {};\n\n        extension[m] = function(o) {\n            if (typeof o === 'undefined') {\n                return this;\n            }\n\n            if (typeof o === 'string' || SVG.Color.isRgb(o) || o && typeof o.fill === 'function') {\n                this.attr(m, o);\n            } else // set all attributes from sugar.fill and sugar.stroke list\n            {\n                for (var i = sugar[m].length - 1; i >= 0; i--) {\n                    if (o[sugar[m][i]] != null) {\n                        this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n                    }\n                }\n            }\n\n            return this;\n        };\n\n        SVG.extend(SVG.Element, SVG.FX, extension);\n    });\n    SVG.extend(SVG.Element, SVG.FX, {\n        // Map translate to transform\n        translate: function translate(x, y) {\n            return this.transform({\n                x: x,\n                y: y\n            });\n        },\n        // Map matrix to transform\n        matrix: function matrix(m) {\n            return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m));\n        },\n        // Opacity\n        opacity: function opacity(value) {\n            return this.attr('opacity', value);\n        },\n        // Relative move over x axis\n        dx: function dx(x) {\n            return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);\n        },\n        // Relative move over y axis\n        dy: function dy(y) {\n            return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);\n        }\n    });\n    SVG.extend(SVG.Path, {\n        // Get path length\n        length: function length() {\n            return this.node.getTotalLength();\n        },\n        // Get point at length\n        pointAt: function pointAt(length) {\n            return this.node.getPointAtLength(length);\n        }\n    });\n    SVG.Set = SVG.invent({\n        // Initialize\n        create: function create(members) {\n            // Set initial state\n            Array.isArray(members) ? this.members = members : this.clear();\n        },\n        // Add class methods\n        extend: {\n            // Add element to set\n            add: function add() {\n                var il,\n                    elements = [].slice.call(arguments);\n\n                for (var i = 0, il = elements.length; i < il; i++) {\n                    this.members.push(elements[i]);\n                }\n\n                return this;\n            },\n            // Remove element from set\n            remove: function remove(element) {\n                var i = this.index(element); // remove given child\n\n                if (i > -1) {\n                    this.members.splice(i, 1);\n                }\n\n                return this;\n            },\n            // Iterate over all members\n            each: function each(block) {\n                for (var i = 0, il = this.members.length; i < il; i++) {\n                    block.apply(this.members[i], [i, this.members]);\n                }\n\n                return this;\n            },\n            // Restore to defaults\n            clear: function clear() {\n                // initialize store\n                this.members = [];\n                return this;\n            },\n            // Get the length of a set\n            length: function length() {\n                return this.members.length;\n            },\n            // Checks if a given element is present in set\n            has: function has(element) {\n                return this.index(element) >= 0;\n            },\n            // retuns index of given element in set\n            index: function index(element) {\n                return this.members.indexOf(element);\n            },\n            // Get member at given index\n            get: function get(i) {\n                return this.members[i];\n            },\n            // Get first member\n            first: function first() {\n                return this.get(0);\n            },\n            // Get last member\n            last: function last() {\n                return this.get(this.members.length - 1);\n            },\n            // Default value\n            valueOf: function valueOf() {\n                return this.members;\n            }\n        },\n        // Add parent method\n        construct: {\n            // Create a new set\n            set: function set(members) {\n                return new SVG.Set(members);\n            }\n        }\n    });\n    SVG.FX.Set = SVG.invent({\n        // Initialize node\n        create: function create(set) {\n            // store reference to set\n            this.set = set;\n        }\n    }); // Alias methods\n\n    SVG.Set.inherit = function() {\n        var methods = []; // gather shape methods\n\n        for (var m in SVG.Shape.prototype) {\n            if (typeof SVG.Shape.prototype[m] === 'function' && typeof SVG.Set.prototype[m] !== 'function') {\n                methods.push(m);\n            }\n        } // apply shape aliasses\n\n\n        methods.forEach(function(method) {\n            SVG.Set.prototype[method] = function() {\n                for (var i = 0, il = this.members.length; i < il; i++) {\n                    if (this.members[i] && typeof this.members[i][method] === 'function') {\n                        this.members[i][method].apply(this.members[i], arguments);\n                    }\n                }\n\n                return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;\n            };\n        }); // clear methods for the next round\n\n        methods = []; // gather fx methods\n\n        for (var m in SVG.FX.prototype) {\n            if (typeof SVG.FX.prototype[m] === 'function' && typeof SVG.FX.Set.prototype[m] !== 'function') {\n                methods.push(m);\n            }\n        } // apply fx aliasses\n\n\n        methods.forEach(function(method) {\n            SVG.FX.Set.prototype[method] = function() {\n                for (var i = 0, il = this.set.members.length; i < il; i++) {\n                    this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);\n                }\n\n                return this;\n            };\n        });\n    };\n\n    SVG.extend(SVG.Element, {});\n    SVG.extend(SVG.Element, {\n        // Remember arbitrary data\n        remember: function remember(k, v) {\n            // remember every item in an object individually\n            if (typeof(arguments[0]) === 'object') {\n                for (var v_ in k) {\n                    this.remember(v_, k[v_]);\n                }\n            } // retrieve memory\n            else if (arguments.length == 1) {\n                return this.memory()[k];\n            } // store memory\n            else {\n                this.memory()[k] = v;\n            }\n\n            return this;\n        },\n        // Erase a given memory\n        forget: function forget() {\n            if (arguments.length == 0) {\n                this._memory = {};\n            } else {\n                for (var i = arguments.length - 1; i >= 0; i--) {\n                    delete this.memory()[arguments[i]];\n                }\n            }\n\n            return this;\n        },\n        // Initialize or return local memory object\n        memory: function memory() {\n            return this._memory || (this._memory = {});\n        }\n    }); // Method for getting an element by id\n\n    SVG.get = function(id) {\n        var node = document.getElementById(idFromReference(id) || id);\n        return SVG.adopt(node);\n    }; // Select elements by query string\n\n\n    SVG.select = function(query, parent) {\n        return new SVG.Set(SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\n            return SVG.adopt(node);\n        }));\n    };\n\n    SVG.extend(SVG.Parent, {\n        // Scoped select method\n        select: function select(query) {\n            return SVG.select(query, this.node);\n        }\n    });\n\n    function pathRegReplace(a, b, c, d) {\n        return c + d.replace(SVG.regex.dots, ' .');\n    } // creates deep clone of array\n\n\n    function _is(el, obj) {\n        return el instanceof obj;\n    } // tests if a given selector matches an element\n\n\n    function _matches(el, selector) {\n        return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n    } // Convert dash-separated-string to camelCase\n\n\n    function camelCase(s) {\n        return s.toLowerCase().replace(/-(.)/g, function(m, g) {\n            return g.toUpperCase();\n        });\n    } // Capitalize first letter of a string\n\n\n    function capitalize(s) {\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    } // Ensure to six-based hex\n\n\n    function fullHex(hex) {\n        return hex.length == 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n    } // Component to hex value\n\n\n    function compToHex(comp) {\n        var hex = comp.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    } // Calculate proportional width and height values when necessary\n\n\n    function proportionalSize(element, width, height) {\n        if (width == null || height == null) {\n            var box = element.bbox();\n\n            if (width == null) {\n                width = box.width / box.height * height;\n            } else if (height == null) {\n                height = box.height / box.width * width;\n            }\n        }\n\n        return {\n            width: width,\n            height: height\n        };\n    } // Delta transform point\n\n\n    function deltaTransformPoint(matrix, x, y) {\n        return {\n            x: x * matrix.a + y * matrix.c + 0,\n            y: x * matrix.b + y * matrix.d + 0\n        };\n    } // Map matrix array to object\n\n\n    function arrayToMatrix(a) {\n        return {\n            a: a[0],\n            b: a[1],\n            c: a[2],\n            d: a[3],\n            e: a[4],\n            f: a[5]\n        };\n    } // Parse matrix if required\n\n\n    function parseMatrix(matrix) {\n        if (!(matrix instanceof SVG.Matrix)) {\n            matrix = new SVG.Matrix(matrix);\n        }\n\n        return matrix;\n    } // Add centre point to transform object\n\n\n    function arrayToString(a) {\n        for (var i = 0, il = a.length, s = ''; i < il; i++) {\n            s += a[i][0];\n\n            if (a[i][1] != null) {\n                s += a[i][1];\n\n                if (a[i][2] != null) {\n                    s += ' ';\n                    s += a[i][2];\n\n                    if (a[i][3] != null) {\n                        s += ' ';\n                        s += a[i][3];\n                        s += ' ';\n                        s += a[i][4];\n\n                        if (a[i][5] != null) {\n                            s += ' ';\n                            s += a[i][5];\n                            s += ' ';\n                            s += a[i][6];\n\n                            if (a[i][7] != null) {\n                                s += ' ';\n                                s += a[i][7];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return s + ' ';\n    } // Deep new id assignment\n\n\n    function assignNewId(node) {\n        // do the same for SVG child nodes as well\n        for (var i = node.childNodes.length - 1; i >= 0; i--) {\n            if (node.childNodes[i] instanceof window.SVGElement) {\n                assignNewId(node.childNodes[i]);\n            }\n        }\n\n        return SVG.adopt(node).id(SVG.eid(node.nodeName));\n    } // Add more bounding box properties\n\n\n    function fullBox(b) {\n        if (b.x == null) {\n            b.x = 0;\n            b.y = 0;\n            b.width = 0;\n            b.height = 0;\n        }\n\n        b.w = b.width;\n        b.h = b.height;\n        b.x2 = b.x + b.width;\n        b.y2 = b.y + b.height;\n        b.cx = b.x + b.width / 2;\n        b.cy = b.y + b.height / 2;\n        return b;\n    } // Get id from reference string\n\n\n    function idFromReference(url) {\n        var m = (url || '').toString().match(SVG.regex.reference);\n        if (m) return m[1];\n    } // If values like 1e-88 are passed, this is not a valid 32 bit float,\n    // but in those cases, we are so close to 0 that 0 works well!\n\n\n    function float32String(v) {\n        return Math.abs(v) > 1e-37 ? v : 0;\n    } // Create matrix array for looping\n\n\n    var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10\n\n    if (typeof window.CustomEvent !== 'function') {\n        // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n        var CustomEventPoly = function CustomEventPoly(event, options) {\n            options = options || {\n                bubbles: false,\n                cancelable: false,\n                detail: undefined\n            };\n            var e = document.createEvent('CustomEvent');\n            e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);\n            return e;\n        };\n\n        CustomEventPoly.prototype = window.Event.prototype;\n        SVG.CustomEvent = CustomEventPoly;\n    } else {\n        SVG.CustomEvent = window.CustomEvent;\n    }\n\n    return SVG;\n});\n"],"file":"svg.min.js"}