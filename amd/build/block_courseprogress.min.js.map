{"version":3,"sources":["block_courseprogress.js"],"names":["define","$","Notification","ApexCharts","CFG","common","init","invalidUser","cpGraph","panel","getPanel","panelBody","selectedCourse","loader","position","donutChart","data","labels","form","getCourseProgressData","courseId","val","find","destroy","show","ajax","url","requestUrl","type","requestType","dataType","requestDataType","action","secret","M","local_edwiserreports","lang","attr","JSON","stringify","courseid","done","response","error","exception","errorcode","average","toPrecision","tooltipStrings","tooltip","insight","fail","ex","always","options","chart","series","reverse","height","colors","getColorTheme","fill","dataLabels","enabled","custom","_ref","seriesIndex","w","dataPointIndex","value","single","plural","label","config","color","concat","util","get_string","legend","formatter","seriesName","opts","globals","get","render","hide","length","select2","on","setInterval","newPosition","width","updateOptions","handleFilterSize"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Plugin administration pages are defined here.\n *\n * @copyright   2021 wisdmlabs <support@wisdmlabs.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/* eslint-disable no-console */\ndefine([\n    'jquery',\n    'core/notification',\n    './chart/apexcharts',\n    './defaultconfig',\n    './common',\n    './select2'\n], function($, Notification, ApexCharts, CFG, common) {\n\n    /**\n     * Initialize\n     * @param {function} invalidUser Callback function\n     */\n    function init(invalidUser) {\n        var cpGraph = null;\n        var panel = CFG.getPanel(\"#courseprogressblock\");\n        var panelBody = CFG.getPanel(\"#courseprogressblock\", \"body\");\n        var selectedCourse = panelBody + \" .course-select\";\n        var loader = panelBody + \" .loader\";\n        var position = 'right';\n        var donutChart = {\n            data: [0, 0, 0, 0, 0, 0],\n            labels: [\n                '81% - 100%',\n                '61% - 80%',\n                '41% - 60%',\n                '21% - 40%',\n                '0% - 20%'\n            ]\n        };\n\n        var form = $(panel + ' form.download-links');\n\n        if ($(selectedCourse).length == 0) {\n            return;\n        }\n\n        getCourseProgressData();\n        $(panelBody + ' .singleselect').select2();\n\n        $(selectedCourse).on(\"change\", function() {\n            $(loader).show();\n\n            getCourseProgressData();\n        });\n\n        // Handling legend position based on width.\n        setInterval(function() {\n            if (cpGraph === null) {\n                return;\n            }\n            let width = $(panel).find('.apexcharts-canvas').width();\n            let newPosition = width >= 400 ? 'right' : 'bottom';\n            if (newPosition == position) {\n                return;\n            }\n            position = newPosition;\n            cpGraph.updateOptions({\n                legend: {\n                    position: position\n                }\n            });\n        }, 1000);\n\n        common.handleFilterSize(panelBody);\n\n        /**\n         * Get progress data through ajax\n         */\n        function getCourseProgressData() {\n            var courseId = $(selectedCourse).val();\n            form.find('input[name=\"filter\"]').val(courseId);\n\n            // If progress graph already exist then destroy\n            if (cpGraph) {\n                cpGraph.destroy();\n            }\n\n            // Show loader.\n            common.loader.show('#courseprogressblock');\n\n            $.ajax({\n                    url: CFG.requestUrl,\n                    type: CFG.requestType,\n                    dataType: CFG.requestDataType,\n                    data: {\n                        action: 'get_courseprogress_graph_data_ajax',\n                        secret: M.local_edwiserreports.secret,\n                        lang: $('html').attr('lang'),\n                        data: JSON.stringify({\n                            courseid: courseId\n                        })\n                    },\n                })\n                .done(function(response) {\n                    if (response.error === true && response.exception.errorcode === 'invalidsecretkey') {\n                        invalidUser('courseprogressblock', response);\n                        return;\n                    }\n                    donutChart.data = response.data;\n                    donutChart.average = response.average == 0 ? 0 : response.average.toPrecision(2);\n                    donutChart.tooltipStrings = response.tooltip;\n                    common.insight('#courseprogressblock .insight', response.insight);\n                })\n                .fail(function(ex) {\n                    Notification.exception(ex);\n                    donutChart.average = '0';\n                })\n                .always(function() {\n                    cpGraph = generateCourseProgressGraph();\n                    $(loader).hide();\n\n                    // Hide loader.\n                    common.loader.hide('#courseprogressblock');\n                });\n        }\n\n        /**\n         * Generate course progress graph.\n         * @returns {Object} chart object\n         */\n        function generateCourseProgressGraph() {\n\n            var options = {\n                series: donutChart.data.reverse(),\n                chart: {\n                    type: 'donut',\n                    height: 350\n                },\n                colors: CFG.getColorTheme(),\n                fill: {\n                    type: 'solid',\n                },\n                labels: donutChart.labels,\n                dataLabels: {\n                    enabled: false\n                },\n                tooltip: {\n                    custom: function({series, seriesIndex, dataPointIndex, w}) {\n                        let value = series[seriesIndex];\n                        let tooltip = value < 2 ? donutChart.tooltipStrings.single : donutChart.tooltipStrings.plural;\n                        let label = w.config.labels[seriesIndex];\n                        let color = w.config.colors[seriesIndex];\n                        return `<div class=\"custom-donut-tooltip\" style=\"text-align:center\">\n                                    <div style=\"color: ${color};\">\n                                        <span style=\"font-weight: 500;\"> ${label}:</span>\n                                        <span style=\"font-weight: 700;\"> ${value} ${tooltip} </span>\n                                    </div>\n                                    <span style=\"color: black; font-size: 0.871rem;\">\n                                        ${M.util.get_string('clickonchartformoreinfo', 'local_edwiserreports')}\n                                    </span>\n                                </div>`;\n                    }\n                },\n                legend: {\n                    position: position,\n                    formatter: function(seriesName, opts) {\n                        return [seriesName + \": \" + opts.w.globals.series[opts.seriesIndex]];\n                    }\n                }\n            };\n\n            var chart = new ApexCharts($('#apex-chart-course-progress').get(0), options);\n            chart.render();\n\n            // Return chart object\n            return chart;\n        }\n    }\n\n    // Must return the init function\n    return {\n        init: init\n    };\n});\n"],"file":"block_courseprogress.min.js"}