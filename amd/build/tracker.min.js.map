{"version":3,"sources":["tracker.js"],"names":["define","$","Ajax","Notification","CFG","PROMISES","IS_INSTALLED","ajax","url","requestUrl","type","requestType","dataType","requestDataType","data","action","GET_TRACKING_DETAILS","contextid","call","methodname","args","KEEP_ALIVE","id","frequency","timer","ticker","time","updateTime","init","done","response","installed","M","cfg","status","window","addEventListener","event","clearInterval","setInterval","fail","exception","require","tracker","document","ready"],"mappings":"AAAA,aAEAA,OAAO,CAAC,SAAU,YAAa,oBAAqB,mBAAoB,SAAUC,EAAGC,EAAMC,EAAcC,GAIvG,IAAIC,EAAW,CAKbC,aAAc,WACZ,OAAOL,EAAEM,KAAK,CACZC,IAAKJ,EAAIK,WACTC,KAAMN,EAAIO,YACVC,SAAUR,EAAIS,gBACdC,KAAM,CACJC,OAAQ,wBAUdC,qBAAsB,SAA8BC,GAClD,OAAOf,EAAKgB,KAAK,CAAC,CAChBC,WAAY,4CACZC,KAAM,CACJH,UAAWA,MAEX,IASNI,WAAY,SAAoBC,EAAIC,GAClC,OAAOrB,EAAKgB,KAAK,CAAC,CAChBC,WAAY,kCACZC,KAAM,CACJE,GAAIA,EACJC,UAAWA,MAEX,GAAM,GAAO,GAAM,KAOvBC,EAAQ,KAKRC,EAAS,KAKTC,EAAO,EAMX,SAASC,EAAWL,GAClBjB,EAASgB,WAAWC,EAAII,GACxBA,EAAO,EA6BT,MAAO,CACLE,KAAM,WACJvB,EAASC,eAAeuB,KAAK,SAAUC,GACjCA,EAASC,WAxBjB1B,EAASW,qBAAqBgB,EAAEC,IAAIhB,WAAWY,KAAK,SAAUC,IACpC,IAApBA,EAASI,SAKbC,OAAOC,iBAAiB,eAAgB,SAAUC,GAChDV,EAAWG,EAASR,IACpBgB,cAAcb,GACda,cAAcd,KAGhBC,EAASc,YAAY,WACnBb,KACC,KACHF,EAAQe,YAAY,WAClBZ,EAAWG,EAASR,KACE,IAArBQ,EAASP,cACXiB,KAAKrC,EAAasC,iBAczBC,QAAQ,CAAC,gCAAiC,SAAUC,GAClD1C,EAAE2C,UAAUC,MAAM,WAChBF,EAAQf","sourcesContent":["define([\n    'jquery',\n    'core/ajax',\n    'core/notification',\n    './defaultconfig'\n], function(\n    $,\n    Ajax,\n    Notification,\n    CFG\n) {\n\n    /**\n     * All ajax promises.\n     */\n    let PROMISES = {\n\n        /**\n         * Check if plugin is installed.\n         * @returns {PROMISE}\n         */\n        IS_INSTALLED: function() {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'is_installed_ajax'\n                },\n            });\n        },\n\n        /**\n         * Fetch tracking details using context id.\n         * @param {Integer} contextid Current page context id\n         * @returns {PROMISE}\n         */\n        GET_TRACKING_DETAILS: function(contextid) {\n            return Ajax.call([{\n                methodname: 'local_edwiserreports_get_tracking_details',\n                args: {\n                    contextid: contextid\n                }\n            }])[0];\n        },\n\n        /**\n         * Send keep alive request for current activity.\n         * @param {Integer} id Track id\n         * @param {Integer} frequency Time to add in track\n         * @returns {PROMISE}\n         */\n        KEEP_ALIVE: function(id, frequency) {\n            return Ajax.call([{\n                methodname: 'local_edwiserreports_keep_alive',\n                args: {\n                    id: id,\n                    frequency: frequency\n                }\n            }], true, false, true)[0];\n        }\n    };\n    /**\n     * Timer variable.\n     */\n    let timer = null;\n\n    /**\n     * Seconds Ticker variable.\n     */\n    let ticker = null;\n\n    /**\n     * Global variable which keeps track of time.\n     */\n    let time = 0;\n\n    /**\n     * Update spend time to db.\n     * @param {Integer} id Track id\n     */\n    function updateTime(id) {\n        PROMISES.KEEP_ALIVE(id, time);\n        time = 0;\n    }\n\n    /**\n     * Initialize\n     */\n    function init() {\n        PROMISES.GET_TRACKING_DETAILS(M.cfg.contextid)\n            .done(function(response) {\n                if (response.status === false) {\n                    return;\n                }\n\n                // Update time on page close/unload.\n                window.addEventListener('beforeunload', function(event) {\n                    updateTime(response.id);\n                    clearInterval(ticker);\n                    clearInterval(timer);\n                });\n                // Seconds Increament.\n                ticker = setInterval(function() {\n                    time++;\n                }, 1000);\n                timer = setInterval(function() {\n                    updateTime(response.id);\n                }, response.frequency * 1000);\n            }).fail(Notification.exception);\n    }\n    return {\n        init: function() {\n            PROMISES.IS_INSTALLED()\n                .done(function(response) {\n                    if (response.installed) {\n                        init();\n                    }\n                });\n        }\n    };\n});\nrequire(['local_edwiserreports/tracker'], function(tracker) {\n    $(document).ready(function() {\n        tracker.init();\n    });\n});"],"file":"tracker.min.js"}