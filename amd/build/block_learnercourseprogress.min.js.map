{"version":3,"sources":["block_learnercourseprogress.js"],"names":["define","$","ApexCharts","Common","CFG","chart","filter","course","barChartDefault","series","type","height","toolbar","show","tools","download","reset","zoom","enabled","tooltip","enabledOnSeries","undefined","shared","followCursor","intersect","inverseOrder","fillSeriesColor","onDatasetHover","highlightDataSeries","marker","items","display","fixed","position","offsetX","offsetY","y","title","grid","borderColor","dataLabels","xaxis","categories","labels","hideOverlappingLabels","trim","rotate","noData","text","M","util","get_string","colors","getColorPalette","pieChartDefault","legend","SELECTOR","PANEL","COURSE","GRAPH","PROMISE","GET_COURSEPROGRESS","ajax","url","requestUrl","requestType","dataType","requestDataType","data","action","secret","local_edwiserreports","JSON","stringify","loadGraph","loader","done","response","Object","assign","yaxis","max","formatter","progress","name","length","graph","destroy","get","render","setTimeout","hide","renderGraph","find","fail","exception","init","invalidUser","select2","on","concat","courseid","parseInt","this","val"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    './chart/apexcharts',\n    './common',\n    './defaultconfig',\n    './select2'\n], function(\n    $,\n    ApexCharts,\n    Common,\n    CFG\n) {\n    /**\n     * Charts list.\n     */\n    var chart = null;\n\n    /**\n     * Filter for ajax.\n     */\n    var filter = {\n        course: 0\n    };\n\n    /**\n     * Bar chart default config.\n     */\n    const barChartDefault = {\n        series: [],\n        chart: {\n            type: 'bar',\n            height: 350,\n            toolbar: {\n                show: false,\n                tools: {\n                    download: false,\n                    reset: '<i class=\"fa fa-refresh\"></i>'\n                }\n            },\n            zoom: {\n                enabled: false\n            }\n        },\n        tooltip: {\n            enabled: true,\n            enabledOnSeries: undefined,\n            shared: true,\n            followCursor: false,\n            intersect: false,\n            inverseOrder: false,\n            fillSeriesColor: false,\n            onDatasetHover: {\n                highlightDataSeries: false,\n            },\n            marker: {\n                show: true\n            },\n            items: {\n                display: 'flex'\n            },\n            fixed: {\n                enabled: false,\n                position: 'topRight',\n                offsetX: 0,\n                offsetY: 0,\n            },\n            y: {\n                title: {}\n            }\n        },\n        grid: {\n            borderColor: '#e7e7e7'\n        },\n        dataLabels: {\n            enabled: false\n        },\n        xaxis: {\n            categories: null,\n            labels: {\n                hideOverlappingLabels: true,\n                trim: true,\n                rotate: 300\n            }\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: [CFG.getColorPalette()[2]]\n    };\n\n    /**\n     * Pie chart default config.\n     */\n    const pieChartDefault = {\n        chart: {\n            type: 'pie',\n            height: 350\n        },\n        legend: {\n            position: 'bottom',\n            offsetY: 0\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: CFG.getColorPalette()\n    };\n\n    /**\n     * Selectors list.\n     */\n    var SELECTOR = {\n        PANEL: '#learnercourseprogressblock',\n        COURSE: '#learnercourseprogress-course-select',\n        GRAPH: '#apex-chart-learnercourseprogress-block'\n    };\n\n    /**\n     * All promises.\n     */\n    var PROMISE = {\n        /**\n         * Get course progress using filters.\n         * @param {Object} filter Filter data\n         * @returns {PROMISE}\n         */\n        GET_COURSEPROGRESS: function(filter) {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'get_learnercourseprogress_graph_data_ajax',\n                    secret: M.local_edwiserreports.secret,\n                    data: JSON.stringify({\n                        filter: filter\n                    })\n                },\n            });\n        }\n    }\n\n    /**\n     * Load graph\n     */\n    function loadGraph() {\n        let data;\n        Common.loader.show(SELECTOR.PANEL);\n\n        /**\n         * Render graph.\n         * @param {DOM} graph Graph element\n         * @param {Object} data Graph data\n         */\n        function renderGraph(graph, data) {\n            if (chart !== null) {\n                chart.destroy();\n            }\n            chart = new ApexCharts(graph.get(0), data);\n            chart.render();\n            setTimeout(function() {\n                Common.loader.hide(SELECTOR.PANEL);\n            }, 1000);\n        }\n\n        PROMISE.GET_COURSEPROGRESS(filter)\n            .done(function(response) {\n                if (filter.course == 0) {\n                    data = Object.assign({}, barChartDefault);\n                    data.yaxis = {\n                        max: 100,\n                        labels: {\n                            formatter: (progress) => {\n                                return progress + '%';\n                            }\n                        }\n                    };\n                    data.xaxis.categories = response.labels;\n                    data.series = [{\n                        name: M.util.get_string('courseprogress', 'local_edwiserreports'),\n                        data: response.progress,\n                    }];\n                    data.chart.toolbar.show = response.labels.length > 30;\n                    data.chart.zoom.enabled = response.labels.length > 30;\n                    data.tooltip.y.title.formatter = (title) => {\n                        return M.util.get_string('progress', 'local_edwiserreports') + ': ';\n                    }\n                } else {\n                    data = Object.assign({}, pieChartDefault);\n                    data.labels = response.labels;\n                    data.series = response.progress;\n                }\n                renderGraph($(SELECTOR.PANEL).find(SELECTOR.GRAPH), data);\n            }).fail(function(exception) {\n                Common.loader.hide(SELECTOR.PANEL);\n            });\n    }\n\n    /**\n     * Initialize event listeners.\n     */\n    function initEvents() {\n\n        // Course selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.COURSE}`, function() {\n            let courseid = parseInt($(this).val());\n            filter.course = courseid;\n\n            // Load graph data.\n            loadGraph();\n        });\n\n    }\n\n    /**\n     * Initialize\n     * @param {function} invalidUser Callback function\n     */\n    function init(invalidUser) {\n        if ($(SELECTOR.PANEL).length == 0) {\n            return;\n        }\n        $(SELECTOR.PANEL).find('.singleselect').select2();\n        initEvents();\n\n        loadGraph();\n    }\n    return {\n        init: init\n    };\n});"],"file":"block_learnercourseprogress.min.js"}