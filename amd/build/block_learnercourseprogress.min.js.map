{"version":3,"sources":["block_learnercourseprogress.js"],"names":["define","$","ApexCharts","Common","CFG","chart","filter","course","barChartDefault","series","type","height","toolbar","show","tools","download","reset","zoom","enabled","tooltip","enabledOnSeries","undefined","shared","followCursor","intersect","inverseOrder","fillSeriesColor","onDatasetHover","highlightDataSeries","marker","items","display","fixed","position","offsetX","offsetY","y","title","grid","borderColor","dataLabels","xaxis","categories","labels","hideOverlappingLabels","trim","rotate","legend","horizontalAlign","itemMargin","horizontal","vertical","noData","text","M","util","get_string","colors","getColorTheme","donutChartDefault","formatter","seriesName","opts","w","globals","seriesIndex","custom","_ref","dataPointIndex","value","label","config","color","concat","SELECTOR","PANEL","COURSE","GRAPH","PROMISE","GET_COURSEPROGRESS","ajax","url","requestUrl","requestType","dataType","requestDataType","data","action","secret","local_edwiserreports","JSON","stringify","loadGraph","loader","done","response","Object","assign","yaxis","max","progress","name","length","find","attr","graph","destroy","get","render","setTimeout","hide","renderGraph","fail","exception","init","invalidUser","select2","on","courseid","parseInt","this","val","setInterval","newPosition","width","updateOptions"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    './chart/apexcharts',\n    './common',\n    './defaultconfig',\n    './select2'\n], function(\n    $,\n    ApexCharts,\n    Common,\n    CFG\n) {\n    /**\n     * Charts list.\n     */\n    var chart = null;\n\n    /**\n     * Filter for ajax.\n     */\n    var filter = {\n        course: 0\n    };\n\n    /**\n     * Bar chart default config.\n     */\n    const barChartDefault = {\n        series: [],\n        chart: {\n            type: 'bar',\n            height: 350,\n            toolbar: {\n                show: false,\n                tools: {\n                    download: false,\n                    reset: '<i class=\"fa fa-refresh\"></i>'\n                }\n            },\n            zoom: {\n                enabled: false\n            }\n        },\n        tooltip: {\n            enabled: true,\n            enabledOnSeries: undefined,\n            shared: true,\n            followCursor: false,\n            intersect: false,\n            inverseOrder: false,\n            fillSeriesColor: false,\n            onDatasetHover: {\n                highlightDataSeries: false,\n            },\n            marker: {\n                show: true\n            },\n            items: {\n                display: 'flex'\n            },\n            fixed: {\n                enabled: false,\n                position: 'topRight',\n                offsetX: 0,\n                offsetY: 0,\n            },\n            y: {\n                title: {}\n            }\n        },\n        grid: {\n            borderColor: '#e7e7e7'\n        },\n        dataLabels: {\n            enabled: false\n        },\n        xaxis: {\n            categories: null,\n            labels: {\n                hideOverlappingLabels: true,\n                trim: true,\n                rotate: 300\n            }\n        },\n        legend: {\n            position: 'top',\n            horizontalAlign: 'left',\n            offsetY: '-20',\n            itemMargin: {\n                horizontal: 10,\n                vertical: 0\n            },\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: [CFG.getColorTheme()[2]]\n    };\n\n    let position = 'right';\n\n    /**\n     * Donut chart default config.\n     */\n    const donutChartDefault = {\n        chart: {\n            type: 'donut',\n            height: 350\n        },\n        legend: {\n            position: position,\n            formatter: function(seriesName, opts) {\n                return [seriesName + \": \" + opts.w.globals.series[opts.seriesIndex] + '%']\n            }\n        },\n        dataLabels: {\n            enabled: false\n        },\n        tooltip: {\n            custom: function({ series, seriesIndex, dataPointIndex, w }) {\n                let value = series[seriesIndex];\n                let label = w.config.labels[seriesIndex];\n                let color = w.config.colors[seriesIndex];\n                return `<div class=\"custom-donut-tooltip\" style=\"color: ${color};\">\n                        <span style=\"font-weight: 500;\"> ${label}:</span>\n                        <span style=\"font-weight: 700;\"> ${value}</span>\n                    </div>`;\n            }\n        },\n        noData: {\n            text: M.util.get_string('nographdata', 'local_edwiserreports')\n        },\n        colors: CFG.getColorTheme()\n    };\n\n    /**\n     * Selectors list.\n     */\n    var SELECTOR = {\n        PANEL: '#learnercourseprogressblock',\n        COURSE: '#learnercourseprogress-course-select',\n        GRAPH: '#apex-chart-learnercourseprogress-block'\n    };\n\n    /**\n     * All promises.\n     */\n    var PROMISE = {\n        /**\n         * Get course progress using filters.\n         * @param {Object} filter Filter data\n         * @returns {PROMISE}\n         */\n        GET_COURSEPROGRESS: function(filter) {\n            return $.ajax({\n                url: CFG.requestUrl,\n                type: CFG.requestType,\n                dataType: CFG.requestDataType,\n                data: {\n                    action: 'get_learnercourseprogress_graph_data_ajax',\n                    secret: M.local_edwiserreports.secret,\n                    data: JSON.stringify({\n                        filter: filter\n                    })\n                },\n            });\n        }\n    }\n\n    /**\n     * Load graph\n     */\n    function loadGraph() {\n        let data;\n        Common.loader.show(SELECTOR.PANEL);\n\n        /**\n         * Render graph.\n         * @param {DOM} graph Graph element\n         * @param {Object} data Graph data\n         */\n        function renderGraph(graph, data) {\n            if (chart !== null) {\n                chart.destroy();\n            }\n            chart = new ApexCharts(graph.get(0), data);\n            chart.render();\n            setTimeout(function() {\n                Common.loader.hide(SELECTOR.PANEL);\n            }, 1000);\n        }\n\n        PROMISE.GET_COURSEPROGRESS(filter)\n            .done(function(response) {\n                if (filter.course == 0) {\n                    data = Object.assign({}, barChartDefault);\n                    data.yaxis = {\n                        max: 100,\n                        labels: {\n                            formatter: (progress) => {\n                                return progress + '%';\n                            }\n                        }\n                    };\n                    data.xaxis.categories = response.labels;\n                    data.series = [{\n                        name: M.util.get_string('courseprogress', 'local_edwiserreports'),\n                        data: response.progress,\n                    }];\n                    data.chart.toolbar.show = response.labels.length > 30;\n                    data.chart.zoom.enabled = response.labels.length > 30;\n                    data.tooltip.y.title.formatter = (title) => {\n                        return M.util.get_string('progress', 'local_edwiserreports') + ': ';\n                    };\n                    $(SELECTOR.PANEL).find('.panel-body').attr('data-charttype', 'bar');\n                } else {\n                    data = Object.assign({}, donutChartDefault);\n                    data.labels = response.labels;\n                    data.series = response.progress;\n                    $(SELECTOR.PANEL).find('.panel-body').attr('data-charttype', 'donut');\n                }\n                renderGraph($(SELECTOR.PANEL).find(SELECTOR.GRAPH), data);\n            }).fail(function(exception) {\n                Common.loader.hide(SELECTOR.PANEL);\n            });\n    }\n\n    /**\n     * Initialize event listeners.\n     */\n    function initEvents() {\n\n        // Course selector listener.\n        $('body').on('change', `${SELECTOR.PANEL} ${SELECTOR.COURSE}`, function() {\n            let courseid = parseInt($(this).val());\n            filter.course = courseid;\n\n            // Load graph data.\n            loadGraph();\n        });\n\n        // Handling legend position based on width.\n        setInterval(function() {\n            if (chart === null) {\n                return;\n            }\n            let width = $(SELECTOR.PANEL).find(SELECTOR.GRAPH).width();\n            let newPosition = width >= 400 ? 'right' : 'bottom';\n            if (newPosition == position) {\n                return;\n            }\n            position = newPosition;\n            chart.updateOptions({\n                legend: {\n                    position: position\n                }\n            })\n        }, 1000);\n\n    }\n\n    /**\n     * Initialize\n     * @param {function} invalidUser Callback function\n     */\n    function init(invalidUser) {\n        if ($(SELECTOR.PANEL).length == 0) {\n            return;\n        }\n        $(SELECTOR.PANEL).find('.singleselect').select2();\n        initEvents();\n\n        loadGraph();\n    }\n    return {\n        init: init\n    };\n});\n"],"file":"block_learnercourseprogress.min.js"}