{"version":3,"sources":["lpstats.js"],"names":["define","$","Templates","Fragment","ModalFactory","ModalEvents","str","V","init","CONTEXTID","PageId","LpSelect","LpTable","loader","filterSection","LpDropdown","find","Table","lpExportDetail","lpListModal","component","translation","get_strings","key","cohortId","addLpStatsTable","lpid","destroy","hide","show","loadFragment","cohortid","done","response","context","JSON","parse","render","then","html","js","replaceNode","fail","ex","console","log","always","DataTable","dom","oLanguage","sEmptyTable","responsive","document","ready","select2","remove","val","cohortFilterItem","on","this","data","cohortFilterBtn","text","changeExportUrl","exportUrlLink","cohortReplaceFlag","filterReplaceFlag","trigger","create","title","M","util","get_string","modal","root","getRoot","cancel","setBody","sesskey","formaction","cfg","wwwroot"],"mappings":"AAAA,aA0BAA,OAAO,CAAC,SAAU,iBAAkB,gBAAiB,qBAAsB,oBAAqB,WAAY,iCAAkC,+BAAgC,SAAUC,EAAGC,EAAWC,EAAUC,EAAcC,EAAaC,EAAKC,GA8I9O,MAAO,CACLC,KA1IF,SAAcC,GACZ,IAAIC,EAAS,0BACTC,EAAW,iBACXC,EAAUF,EAAS,UACnBG,EAASH,EAAS,WAClBI,EAAgBb,EAAE,8CAClBc,EAAad,EAAES,GAAQM,KAAK,oBAC5BC,EAAQ,KAMRC,EAAiBjB,EAAE,iCACnBkB,EAAc,KAMdC,EAAY,uBAMZC,EAAcf,EAAIgB,YAAY,CAAC,CACjCC,IAAK,mBACLH,UAAWA,KAGTI,EAAW,EAwEf,SAASC,EAAgBC,EAAMF,GACzBP,IACFA,EAAMU,UACN1B,EAAEW,GAASgB,OACX3B,EAAEY,GAAQgB,QAGG1B,EAAS2B,aAAa,uBAAwB,UAAWrB,EAAW,CACjFiB,KAAMA,EACNK,SAAUP,IAEHQ,KAAK,SAAUC,GACtB,IAAIC,EAAUC,KAAKC,MAAMH,GAEzB/B,EAAUmC,OAAO,mCAAoCH,GAASI,KAAK,SAAUC,EAAMC,GACjFtC,EAAUuC,YAAY7B,EAAS2B,EAAMC,KAEpCE,KAAK,SAAUC,GAChBC,QAAQC,IAAIF,KACXG,OAAO,WACR7C,EAAEW,GAASiB,OACXZ,EAAQhB,EAAEW,GAASmC,UAAU,CAC3BC,IAAK,uBACLC,UAAW,CACTC,YAAa,kDAEfC,YAAY,IAEdlD,EAAEY,GAAQe,WAnGhB3B,EAAEmD,UAAUC,MAAM,WAChBvC,EAAcyB,KAAKxB,EAAWwB,QAC9BtC,EAAEmD,UAAUpC,KAAKL,GAAU2C,UAC3BrD,EAAEmD,UAAUpC,KAAKL,GAAUkB,OAC3Bd,EAAWwC,SACX,IAAI7B,EAAOzB,EAAEmD,UAAUpC,KAAKL,GAAU6C,MACtC/B,EAAgBC,EAAMF,GAGtBvB,EAAEM,EAAEkD,kBAAkBC,GAAG,QAAS,WAChClC,EAAWvB,EAAE0D,MAAMC,KAAK,YACxB3D,EAAEM,EAAEsD,iBAAiBtB,KAAKtC,EAAE0D,MAAMG,QAClCvD,EAAEwD,gBAAgBvC,EAAUjB,EAAEyD,cAAezD,EAAE0D,mBAC/CxC,EAAgBC,EAAMF,KAExBvB,EAAEmD,UAAUpC,KAAKL,GAAU+C,GAAG,SAAU,WACtCzD,EAAEW,GAASgB,OACX3B,EAAEY,GAAQgB,OACVH,EAAOzB,EAAEmD,UAAUpC,KAAKL,GAAU6C,MAClCjD,EAAEwD,gBAAgBrC,EAAMnB,EAAEyD,cAAezD,EAAE2D,mBAC3CzC,EAAgBC,EAAMF,KAIxBN,EAAewC,GAAG,QAAS,WAS7B,IAA8BS,EAAAA,EARLjD,EAUnBC,EACFA,EAAYU,OAIZR,EAAYiB,KAAK,WAEflC,EAAagE,OAAO,CAClBC,MAAOC,EAAEC,KAAKC,WAAW,mBAAoBpD,IAC5C+C,GAASnC,KAAK,SAAUyC,GAEzB,IAAIC,EAAOD,EAAME,UAEjBxD,EAAcsD,EACdC,EAAKhB,GAAGrD,EAAYuE,OAAQ,WAC1BH,EAAM7C,SAGR6C,EAAMI,QAAQ3E,EAAUmC,OAAO,wCAAyC,CACtEyC,QAAS7E,EAAES,GAAQkD,KAAK,WACxBmB,WAAYT,EAAEU,IAAIC,QAAU,wCAG9BR,EAAM5C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Plugin administration pages are defined here.\n *\n * @package     local_edwiserreports\n * @copyright   2021 wisdmlabs <support@wisdmlabs.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/* eslint-disable no-console */\ndefine([\n    'jquery',\n    'core/templates',\n    'core/fragment',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/str',\n    'local_edwiserreports/variables',\n    'local_edwiserreports/common'\n], function(\n    $,\n    Templates,\n    Fragment,\n    ModalFactory,\n    ModalEvents,\n    str,\n    V\n) {\n    /**\n     * Initialize\n     * @param {integer} CONTEXTID Current page context id\n     */\n    function init(CONTEXTID) {\n        var PageId = \"#wdm-lpstats-individual\";\n        var LpSelect = \"#wdm-lp-select\";\n        var LpTable = PageId + \" .table\";\n        var loader = PageId + \" .loader\";\n        var filterSection = $(\"#wdm-userfilter .row .col-md-6:first-child\");\n        var LpDropdown = $(PageId).find(\"#wdm-lp-dropdown\");\n        var Table = null;\n\n        /**\n         * Learning program export detailed report button\n         * @type {[type]}\n         */\n        var lpExportDetail = $(\"#wdm-export-detail-lpsreports\");\n        var lpListModal = null;\n\n        /**\n         * Plugin Component\n         * @type {String}\n         */\n        var component = 'local_edwiserreports';\n\n        /**\n         * Get translation to use strings\n         * @type {object}\n         */\n        var translation = str.get_strings([\n            {key: 'lpdetailedreport', component: component}\n        ]);\n\n        // Varibales for cohort filter\n        var cohortId = 0;\n\n        $(document).ready(function() {\n            filterSection.html(LpDropdown.html());\n            $(document).find(LpSelect).select2();\n            $(document).find(LpSelect).show();\n            LpDropdown.remove();\n\n            var lpid = $(document).find(LpSelect).val();\n            addLpStatsTable(lpid, cohortId);\n\n            /* Select cohort filter for active users block */\n            $(V.cohortFilterItem).on('click', function() {\n                cohortId = $(this).data('cohortid');\n                $(V.cohortFilterBtn).html($(this).text());\n                V.changeExportUrl(cohortId, V.exportUrlLink, V.cohortReplaceFlag);\n                addLpStatsTable(lpid, cohortId);\n            });\n\n            $(document).find(LpSelect).on(\"change\", function() {\n                $(LpTable).hide();\n                $(loader).show();\n\n                lpid = $(document).find(LpSelect).val();\n                V.changeExportUrl(lpid, V.exportUrlLink, V.filterReplaceFlag);\n                addLpStatsTable(lpid, cohortId);\n            });\n\n            /* Export Detailed Report */\n            lpExportDetail.on('click', function() {\n                exportDetailedReport(lpExportDetail);\n            });\n        });\n\n        /**\n         * Export Detailed Report\n         * @param {Objcet} trigger Trigger dom element\n         */\n        function exportDetailedReport(trigger) {\n            // If modal already exist then show modal\n            if (lpListModal) {\n                lpListModal.show();\n            } else {\n                // When translation is redy then create modal\n                // eslint-disable-next-line promise/catch-or-return\n                translation.then(function() {\n                    // Create Learning Program Modal\n                    ModalFactory.create({\n                        title: M.util.get_string(\n                            'lpdetailedreport', component\n                        )\n                    }, trigger).done(function(modal) {\n                        // Get modal root\n                        var root = modal.getRoot();\n\n                        // Set global Modal\n                        lpListModal = modal;\n                        root.on(ModalEvents.cancel, function() {\n                            modal.hide();\n                        });\n\n                        // Set Modal Body\n                        modal.setBody(Templates.render(\n                            'local_edwiserreports/lpdetailedreport', {\n                            sesskey: $(PageId).data('sesskey'),\n                            formaction: M.cfg.wwwroot + \"/local/edwiserreports/download.php\"\n                        }\n                        ));\n\n                        // Show learning program modal\n                        modal.show();\n                    });\n                    return;\n                });\n            }\n        }\n\n        /**\n         * Add Lp stats table in learning program page\n         * @param {int} lpid     Learning Program ID\n         * @param {int} cohortId Cohort ID\n         */\n        function addLpStatsTable(lpid, cohortId) {\n            if (Table) {\n                Table.destroy();\n                $(LpTable).hide();\n                $(loader).show();\n            }\n\n            var fragment = Fragment.loadFragment(\n                'local_edwiserreports',\n                'lpstats',\n                CONTEXTID,\n                {\n                    lpid: lpid,\n                    cohortid: cohortId\n                }\n            );\n\n            fragment.done(function(response) {\n                var context = JSON.parse(response);\n                // eslint-disable-next-line promise/catch-or-return\n                Templates.render('local_edwiserreports/lpstatsinfo', context)\n                .then(function(html, js) {\n                    Templates.replaceNode(LpTable, html, js);\n                    return;\n                }).fail(function(ex) {\n                    console.log(ex);\n                }).always(function() {\n                    $(LpTable).show();\n                    Table = $(LpTable).DataTable({\n                        dom: \"<'pull-left'f><t><p>\",\n                        oLanguage: {\n                            sEmptyTable: \"No Users are enrolled in any Learning Programs\"\n                        },\n                        responsive: true\n                    });\n                    $(loader).hide();\n                });\n            });\n        }\n    }\n\n    return {\n        init: init\n    };\n\n});\n"],"file":"lpstats.min.js"}